/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TonomyTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INITIAL_SUPPLY"
      | "allowance"
      | "antiSnipingManager"
      | "antiSnipingSeconds"
      | "approve"
      | "balanceOf"
      | "balanceOfAt"
      | "batchBlacklistWallets"
      | "blacklistedWallets"
      | "bridge"
      | "bridgeBurn"
      | "bridgeMint"
      | "canTrade"
      | "cooldownEnabled"
      | "cooldownSeconds"
      | "decimals"
      | "decreaseAllowance"
      | "getRemainingAntiSnipingSeconds"
      | "getRemainingBuyCapacity"
      | "getWalletBuyAmount"
      | "increaseAllowance"
      | "initialize"
      | "isAntiSnipingPeriodActive"
      | "isBlacklisted"
      | "isLaunchPeriodActive"
      | "isLaunchPeriodEnabled"
      | "isPoolAddressSet"
      | "lastBuyTimestamp"
      | "liquidityAddedTimestamp"
      | "lpWallet"
      | "mintTo"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "perWalletBuyCap"
      | "poolAddress"
      | "proxiableUUID"
      | "renounceOwnership"
      | "resetWalletBuyAmount"
      | "setAntiSnipingManager"
      | "setAntiSnipingSeconds"
      | "setBridge"
      | "setCooldownEnabled"
      | "setLaunchPeriodEnabled"
      | "setLiquidityAdded"
      | "setLpWallet"
      | "setPerWalletBuyCap"
      | "setPoolAddress"
      | "setTradingEnabled"
      | "setWalletBlacklisted"
      | "symbol"
      | "totalSupply"
      | "totalSupplyAt"
      | "tradingEnabled"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "walletBuyAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "AntiSnipingManagerSet"
      | "AntiSnipingSecondsSet"
      | "Approval"
      | "BeaconUpgraded"
      | "CooldownSet"
      | "Initialized"
      | "LaunchPeriodEnabled"
      | "LiquidityAdded"
      | "LpWalletSet"
      | "OwnershipTransferred"
      | "Paused"
      | "PerWalletBuyCapSet"
      | "PoolAddressSet"
      | "Snapshot"
      | "TradingEnabled"
      | "Transfer"
      | "Unpaused"
      | "Upgraded"
      | "WalletBlacklisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "antiSnipingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "antiSnipingSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBlacklistWallets",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedWallets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeBurn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canTrade",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingAntiSnipingSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingBuyCapacity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletBuyAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAntiSnipingPeriodActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLaunchPeriodActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLaunchPeriodEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolAddressSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBuyTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityAddedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "mintTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "perWalletBuyCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetWalletBuyAmount",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAntiSnipingManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAntiSnipingSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownEnabled",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLaunchPeriodEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityAdded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLpWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerWalletBuyCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletBlacklisted",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "walletBuyAmount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "antiSnipingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "antiSnipingSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBlacklistWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingAntiSnipingSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingBuyCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletBuyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAntiSnipingPeriodActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLaunchPeriodActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLaunchPeriodEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolAddressSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBuyTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityAddedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "perWalletBuyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetWalletBuyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAntiSnipingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAntiSnipingSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLaunchPeriodEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityAdded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLpWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerWalletBuyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletBuyAmount",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AntiSnipingManagerSetEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AntiSnipingSecondsSetEvent {
  export type InputTuple = [seconds_: BigNumberish];
  export type OutputTuple = [seconds_: bigint];
  export interface OutputObject {
    seconds_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CooldownSetEvent {
  export type InputTuple = [enabled: boolean, seconds_: BigNumberish];
  export type OutputTuple = [enabled: boolean, seconds_: bigint];
  export interface OutputObject {
    enabled: boolean;
    seconds_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LaunchPeriodEnabledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LpWalletSetEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerWalletBuyCapSetEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolAddressSetEvent {
  export type InputTuple = [pool: AddressLike];
  export type OutputTuple = [pool: string];
  export interface OutputObject {
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SnapshotEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradingEnabledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletBlacklistedEvent {
  export type InputTuple = [wallet: AddressLike, status: boolean];
  export type OutputTuple = [wallet: string, status: boolean];
  export interface OutputObject {
    wallet: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TonomyToken extends BaseContract {
  connect(runner?: ContractRunner | null): TonomyToken;
  waitForDeployment(): Promise<this>;

  interface: TonomyTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INITIAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  antiSnipingManager: TypedContractMethod<[], [string], "view">;

  antiSnipingSeconds: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  balanceOfAt: TypedContractMethod<
    [account: AddressLike, snapshotId: BigNumberish],
    [bigint],
    "view"
  >;

  batchBlacklistWallets: TypedContractMethod<
    [_wallets: AddressLike[], _status: boolean],
    [void],
    "nonpayable"
  >;

  blacklistedWallets: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  bridge: TypedContractMethod<[], [string], "view">;

  bridgeBurn: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  bridgeMint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  canTrade: TypedContractMethod<[_addr: AddressLike], [boolean], "view">;

  cooldownEnabled: TypedContractMethod<[], [boolean], "view">;

  cooldownSeconds: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getRemainingAntiSnipingSeconds: TypedContractMethod<[], [bigint], "view">;

  getRemainingBuyCapacity: TypedContractMethod<
    [_wallet: AddressLike],
    [bigint],
    "view"
  >;

  getWalletBuyAmount: TypedContractMethod<
    [_wallet: AddressLike],
    [bigint],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isAntiSnipingPeriodActive: TypedContractMethod<[], [boolean], "view">;

  isBlacklisted: TypedContractMethod<[_addr: AddressLike], [boolean], "view">;

  isLaunchPeriodActive: TypedContractMethod<[], [boolean], "view">;

  isLaunchPeriodEnabled: TypedContractMethod<[], [boolean], "view">;

  isPoolAddressSet: TypedContractMethod<[], [boolean], "view">;

  lastBuyTimestamp: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  liquidityAddedTimestamp: TypedContractMethod<[], [bigint], "view">;

  lpWallet: TypedContractMethod<[], [string], "view">;

  mintTo: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  perWalletBuyCap: TypedContractMethod<[], [bigint], "view">;

  poolAddress: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resetWalletBuyAmount: TypedContractMethod<
    [_wallets: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setAntiSnipingManager: TypedContractMethod<
    [_antiSnipingManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setAntiSnipingSeconds: TypedContractMethod<
    [_seconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBridge: TypedContractMethod<[_bridge: AddressLike], [void], "nonpayable">;

  setCooldownEnabled: TypedContractMethod<
    [_enabled: boolean, _seconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLaunchPeriodEnabled: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  setLiquidityAdded: TypedContractMethod<[], [void], "nonpayable">;

  setLpWallet: TypedContractMethod<
    [_lpWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setPerWalletBuyCap: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolAddress: TypedContractMethod<
    [_poolAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setTradingEnabled: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  setWalletBlacklisted: TypedContractMethod<
    [_wallet: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<
    [snapshotId: BigNumberish],
    [bigint],
    "view"
  >;

  tradingEnabled: TypedContractMethod<[], [boolean], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  walletBuyAmount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INITIAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "antiSnipingManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "antiSnipingSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [account: AddressLike, snapshotId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchBlacklistWallets"
  ): TypedContractMethod<
    [_wallets: AddressLike[], _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "blacklistedWallets"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridgeBurn"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeMint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canTrade"
  ): TypedContractMethod<[_addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "cooldownEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "cooldownSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRemainingAntiSnipingSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainingBuyCapacity"
  ): TypedContractMethod<[_wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletBuyAmount"
  ): TypedContractMethod<[_wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAntiSnipingPeriodActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[_addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLaunchPeriodActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLaunchPeriodEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPoolAddressSet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastBuyTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidityAddedTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "perWalletBuyCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetWalletBuyAmount"
  ): TypedContractMethod<[_wallets: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAntiSnipingManager"
  ): TypedContractMethod<
    [_antiSnipingManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAntiSnipingSeconds"
  ): TypedContractMethod<[_seconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBridge"
  ): TypedContractMethod<[_bridge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCooldownEnabled"
  ): TypedContractMethod<
    [_enabled: boolean, _seconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLaunchPeriodEnabled"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidityAdded"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLpWallet"
  ): TypedContractMethod<[_lpWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPerWalletBuyCap"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoolAddress"
  ): TypedContractMethod<[_poolAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTradingEnabled"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWalletBlacklisted"
  ): TypedContractMethod<
    [_wallet: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[snapshotId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "walletBuyAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "AntiSnipingManagerSet"
  ): TypedContractEvent<
    AntiSnipingManagerSetEvent.InputTuple,
    AntiSnipingManagerSetEvent.OutputTuple,
    AntiSnipingManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "AntiSnipingSecondsSet"
  ): TypedContractEvent<
    AntiSnipingSecondsSetEvent.InputTuple,
    AntiSnipingSecondsSetEvent.OutputTuple,
    AntiSnipingSecondsSetEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CooldownSet"
  ): TypedContractEvent<
    CooldownSetEvent.InputTuple,
    CooldownSetEvent.OutputTuple,
    CooldownSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LaunchPeriodEnabled"
  ): TypedContractEvent<
    LaunchPeriodEnabledEvent.InputTuple,
    LaunchPeriodEnabledEvent.OutputTuple,
    LaunchPeriodEnabledEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LpWalletSet"
  ): TypedContractEvent<
    LpWalletSetEvent.InputTuple,
    LpWalletSetEvent.OutputTuple,
    LpWalletSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PerWalletBuyCapSet"
  ): TypedContractEvent<
    PerWalletBuyCapSetEvent.InputTuple,
    PerWalletBuyCapSetEvent.OutputTuple,
    PerWalletBuyCapSetEvent.OutputObject
  >;
  getEvent(
    key: "PoolAddressSet"
  ): TypedContractEvent<
    PoolAddressSetEvent.InputTuple,
    PoolAddressSetEvent.OutputTuple,
    PoolAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "Snapshot"
  ): TypedContractEvent<
    SnapshotEvent.InputTuple,
    SnapshotEvent.OutputTuple,
    SnapshotEvent.OutputObject
  >;
  getEvent(
    key: "TradingEnabled"
  ): TypedContractEvent<
    TradingEnabledEvent.InputTuple,
    TradingEnabledEvent.OutputTuple,
    TradingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WalletBlacklisted"
  ): TypedContractEvent<
    WalletBlacklistedEvent.InputTuple,
    WalletBlacklistedEvent.OutputTuple,
    WalletBlacklistedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "AntiSnipingManagerSet(address)": TypedContractEvent<
      AntiSnipingManagerSetEvent.InputTuple,
      AntiSnipingManagerSetEvent.OutputTuple,
      AntiSnipingManagerSetEvent.OutputObject
    >;
    AntiSnipingManagerSet: TypedContractEvent<
      AntiSnipingManagerSetEvent.InputTuple,
      AntiSnipingManagerSetEvent.OutputTuple,
      AntiSnipingManagerSetEvent.OutputObject
    >;

    "AntiSnipingSecondsSet(uint32)": TypedContractEvent<
      AntiSnipingSecondsSetEvent.InputTuple,
      AntiSnipingSecondsSetEvent.OutputTuple,
      AntiSnipingSecondsSetEvent.OutputObject
    >;
    AntiSnipingSecondsSet: TypedContractEvent<
      AntiSnipingSecondsSetEvent.InputTuple,
      AntiSnipingSecondsSetEvent.OutputTuple,
      AntiSnipingSecondsSetEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "CooldownSet(bool,uint32)": TypedContractEvent<
      CooldownSetEvent.InputTuple,
      CooldownSetEvent.OutputTuple,
      CooldownSetEvent.OutputObject
    >;
    CooldownSet: TypedContractEvent<
      CooldownSetEvent.InputTuple,
      CooldownSetEvent.OutputTuple,
      CooldownSetEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LaunchPeriodEnabled(bool)": TypedContractEvent<
      LaunchPeriodEnabledEvent.InputTuple,
      LaunchPeriodEnabledEvent.OutputTuple,
      LaunchPeriodEnabledEvent.OutputObject
    >;
    LaunchPeriodEnabled: TypedContractEvent<
      LaunchPeriodEnabledEvent.InputTuple,
      LaunchPeriodEnabledEvent.OutputTuple,
      LaunchPeriodEnabledEvent.OutputObject
    >;

    "LiquidityAdded(uint64)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LpWalletSet(address)": TypedContractEvent<
      LpWalletSetEvent.InputTuple,
      LpWalletSetEvent.OutputTuple,
      LpWalletSetEvent.OutputObject
    >;
    LpWalletSet: TypedContractEvent<
      LpWalletSetEvent.InputTuple,
      LpWalletSetEvent.OutputTuple,
      LpWalletSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PerWalletBuyCapSet(uint128)": TypedContractEvent<
      PerWalletBuyCapSetEvent.InputTuple,
      PerWalletBuyCapSetEvent.OutputTuple,
      PerWalletBuyCapSetEvent.OutputObject
    >;
    PerWalletBuyCapSet: TypedContractEvent<
      PerWalletBuyCapSetEvent.InputTuple,
      PerWalletBuyCapSetEvent.OutputTuple,
      PerWalletBuyCapSetEvent.OutputObject
    >;

    "PoolAddressSet(address)": TypedContractEvent<
      PoolAddressSetEvent.InputTuple,
      PoolAddressSetEvent.OutputTuple,
      PoolAddressSetEvent.OutputObject
    >;
    PoolAddressSet: TypedContractEvent<
      PoolAddressSetEvent.InputTuple,
      PoolAddressSetEvent.OutputTuple,
      PoolAddressSetEvent.OutputObject
    >;

    "Snapshot(uint256)": TypedContractEvent<
      SnapshotEvent.InputTuple,
      SnapshotEvent.OutputTuple,
      SnapshotEvent.OutputObject
    >;
    Snapshot: TypedContractEvent<
      SnapshotEvent.InputTuple,
      SnapshotEvent.OutputTuple,
      SnapshotEvent.OutputObject
    >;

    "TradingEnabled(bool)": TypedContractEvent<
      TradingEnabledEvent.InputTuple,
      TradingEnabledEvent.OutputTuple,
      TradingEnabledEvent.OutputObject
    >;
    TradingEnabled: TypedContractEvent<
      TradingEnabledEvent.InputTuple,
      TradingEnabledEvent.OutputTuple,
      TradingEnabledEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WalletBlacklisted(address,bool)": TypedContractEvent<
      WalletBlacklistedEvent.InputTuple,
      WalletBlacklistedEvent.OutputTuple,
      WalletBlacklistedEvent.OutputObject
    >;
    WalletBlacklisted: TypedContractEvent<
      WalletBlacklistedEvent.InputTuple,
      WalletBlacklistedEvent.OutputTuple,
      WalletBlacklistedEvent.OutputObject
    >;
  };
}
