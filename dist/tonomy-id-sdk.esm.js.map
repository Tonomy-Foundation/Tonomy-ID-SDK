{"version":3,"file":"tonomy-id-sdk.esm.js","sources":["../src/services/errors.ts","../src/settings.ts","../src/services/eosio/eosio.ts","../src/services/eosio/transaction.ts","../src/services/keymanager.ts","../src/services/storage.ts","../src/util/crypto.ts","../src/services/username.ts","../src/services/contracts/IDContract.ts","../src/util/top100Passwords.ts","../src/util/passwords.ts","../src/app.ts","../src/util/base64.ts","../src/util/did-jwk.ts","../src/util/message.ts","../src/userApps.ts","../src/communication.ts","../src/user.ts","../src/services/eosio/authority.ts","../src/services/contracts/EosioContract.ts","../src/services/contracts/EosioTokenContract.ts","../src/managers/browserStorage.ts","../src/externalUser.ts","../src/index.ts"],"sourcesContent":["export class HttpError extends Error {\r\n    path: string;\r\n    response: {\r\n        headers: object;\r\n        status: number;\r\n        json?: object;\r\n        html?: string;\r\n        text?: string;\r\n    };\r\n    line?: number;\r\n    column?: number;\r\n    sourceURL?: string;\r\n\r\n    constructor(httpError: HttpError) {\r\n        super('HTTP Error');\r\n        // Ensure the name of this error is the same as the class name\r\n        this.name = this.constructor.name;\r\n\r\n        // This clips the constructor invocation from the stack trace.\r\n        // It's not absolutely essential, but it does make the stack trace a little nicer.\r\n        //  @see Node.js reference (bottom)\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, this.constructor);\r\n        }\r\n\r\n        this.stack = new Error().stack;\r\n\r\n        this.path = httpError.path;\r\n        this.response = httpError.response;\r\n        if (httpError.line) this.line = httpError.line;\r\n        if (httpError.column) this.line = httpError.column;\r\n        if (httpError.sourceURL) this.sourceURL = httpError.sourceURL;\r\n    }\r\n}\r\n\r\nexport class SdkError extends Error {\r\n    code: SdkErrors;\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        // Ensure the name of this error is the same as the class name\r\n        this.name = this.constructor.name;\r\n\r\n        // This clips the constructor invocation from the stack trace.\r\n        // It's not absolutely essential, but it does make the stack trace a little nicer.\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, this.constructor);\r\n        }\r\n\r\n        this.stack = new Error().stack;\r\n    }\r\n}\r\n\r\nexport function createSdkError(message: string, code?: SdkErrors): SdkError {\r\n    let error = new SdkError(message);\r\n\r\n    if (code) {\r\n        error = new SdkError(code + ': ' + message);\r\n        error.code = code;\r\n    }\r\n\r\n    return error;\r\n}\r\n\r\n// using never to suppress error https://bobbyhadz.com/blog/typescript-function-that-throws-error#:~:text=To%20declare%20a%20function%20that,terminate%20execution%20of%20the%20program.\r\nexport function throwError(message: string, code?: SdkErrors): never {\r\n    throw createSdkError(message, code);\r\n}\r\n\r\nenum SdkErrors {\r\n    UsernameTaken = 'UsernameTaken',\r\n    AccountDoesntExist = 'AccountDoesntExist',\r\n    UsernameNotFound = 'UsernameNotFound',\r\n    DataQueryNoRowDataFound = 'DataQueryNoRowDataFound',\r\n    UpdateKeysTransactionNoKeys = 'UpdateKeysTransactionNoKeys',\r\n    CouldntCreateApi = 'CouldntCreateApi',\r\n    PasswordFormatInvalid = 'PasswordFormatInvalid',\r\n    PasswordTooCommon = 'PasswordTooCommon',\r\n    PasswordInValid = 'PasswordInValid',\r\n    KeyNotFound = 'KeyNotFound',\r\n    OriginNotFound = 'OriginNotFound',\r\n    JwtNotValid = 'JwtNotValid',\r\n    WrongOrigin = 'WrongOrigin',\r\n    SettingsNotInitialized = 'SettingsNotInitialized',\r\n    MissingParams = 'MissingParams',\r\n    InvalidKey = 'InvalidKey',\r\n    invalidDataType = 'invalidDataType',\r\n    missingChallenge = 'missingChallenge',\r\n    CommunicationNotConnected = 'CommunicationNotConnected',\r\n    CommunicationTimeout = 'CommunicationTimeout',\r\n    OriginMismatch = 'OriginMismatch',\r\n    PinInValid = 'PinInValid',\r\n    AccountNotFound = 'AccountNotFound',\r\n    UserNotLoggedIn = 'UserNotLoggedIn',\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace SdkErrors {\r\n    /*\r\n     * Returns the index of the enum value\r\n     *\r\n     * @param value The value to get the index of\r\n     */\r\n    export function indexFor(value: SdkErrors): number {\r\n        return Object.keys(SdkErrors).indexOf(value);\r\n    }\r\n\r\n    /*\r\n     * Creates an SdkErrors from a string or index of the level\r\n     *\r\n     * @param value The string or index\r\n     */\r\n    export function from(value: number | string): SdkErrors {\r\n        let index: number;\r\n\r\n        if (typeof value !== 'number') {\r\n            index = SdkErrors.indexFor(value as SdkErrors);\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        return Object.values(SdkErrors)[index] as SdkErrors;\r\n    }\r\n}\r\n\r\nexport { SdkErrors };\r\n","import { SdkErrors, throwError } from './services/errors';\r\n\r\nexport type SettingsType = {\r\n    blockchainUrl: string;\r\n    ssoWebsiteOrigin: string;\r\n    accountSuffix: string;\r\n    communicationUrl: string;\r\n};\r\n\r\nlet settings: SettingsType;\r\nlet initialized = false;\r\n\r\nexport function setSettings(newSettings: Partial<SettingsType>) {\r\n    settings = newSettings as SettingsType;\r\n    initialized = true;\r\n}\r\n\r\nexport function getSettings(): SettingsType {\r\n    if (!initialized) {\r\n        throwError('Settings not yet initialized', SdkErrors.SettingsNotInitialized);\r\n    }\r\n    return settings;\r\n}\r\n","import { APIClient, FetchProvider } from '@greymass/eosio';\nimport { GetInfoResponse } from '@greymass/eosio/src/api/v1/types';\nimport fetch from 'cross-fetch';\nimport { getSettings } from '../../settings';\nimport { throwError, SdkErrors } from '../errors';\n\nlet api: APIClient;\n\nexport async function getApi(): Promise<APIClient> {\n    if (api) return api;\n\n    const settings = getSettings();\n\n    api = new APIClient({\n        url: settings.blockchainUrl,\n        provider: new FetchProvider(settings.blockchainUrl, { fetch }),\n    });\n    if (!api) throwError('Could not create API client', SdkErrors.CouldntCreateApi);\n    return api;\n}\n\nexport async function getChainInfo(): Promise<GetInfoResponse> {\n    const api = await getApi();\n\n    return (await api.v1.chain.get_info()) as unknown as GetInfoResponse;\n}\n","import { Action, API, Transaction, SignedTransaction, Signature, Checksum256, Name, PrivateKey } from '@greymass/eosio';\nimport { KeyManager, KeyManagerLevel } from '../keymanager';\nimport { HttpError } from '../errors';\nimport { getApi } from './eosio';\n\ntype ActionData = {\n    authorization: {\n        actor: string;\n        permission: string;\n    }[];\n    account?: string;\n    name: string;\n    data: object;\n};\n\ninterface Signer {\n    sign(digest: Checksum256 | string): Promise<Signature>;\n}\n\ninterface AntelopePushTransactionErrorConstructor extends Error {\n    code: number;\n    error: {\n        code: number;\n        name: string;\n        what: string;\n        details: [\n            {\n                message: string;\n                file: string;\n                line_number: number;\n                method: string;\n            }\n        ];\n    };\n}\n\nfunction createSigner(privateKey: PrivateKey): Signer {\n    return {\n        async sign(digest: Checksum256): Promise<Signature> {\n            return privateKey.signDigest(digest);\n        },\n    };\n}\n\nfunction createKeyManagerSigner(keyManager: KeyManager, level: KeyManagerLevel, challenge?: string): Signer {\n    return {\n        async sign(digest: string | Checksum256): Promise<Signature> {\n            return (await keyManager.signData({\n                level,\n                data: digest,\n                challenge,\n            })) as Signature;\n        },\n    };\n}\n\nexport class AntelopePushTransactionError extends Error {\n    code: number; // HTTP error code\n    message: string; // HTTP error message\n    error: {\n        code: number; // Antelope error code\n        name: string;\n        what: string;\n        details: [\n            {\n                message: string;\n                file: string;\n                line_number: number;\n                method: string;\n            }\n        ];\n    };\n\n    constructor(err: AntelopePushTransactionErrorConstructor) {\n        super('AntelopePushTransactionError');\n\n        this.code = err.code;\n        this.message = err.message;\n        this.error = err.error;\n        this.stack = new Error().stack;\n        // Ensure the name of this error is the same as the class name\n        this.name = this.constructor.name;\n        // This clips the constructor invocation from the stack trace.\n        // It's not absolutely essential, but it does make the stack trace a little nicer.\n        //  @see Node.js reference (bottom)\n\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n\n    hasErrorCode(code: number): boolean {\n        return this.error.code === code;\n    }\n\n    hasTonomyErrorCode(code: string): boolean {\n        // TODO iterate over deatils array instead of only looking at first element\n        return this.error.details[0].message.search(code) > 0;\n    }\n}\n\nasync function transact(\n    contract: Name,\n    actions: ActionData[],\n    signer: Signer\n): Promise<API.v1.PushTransactionResponse> {\n    // Get the ABI\n    const api = await getApi();\n    const abi = await api.v1.chain.get_abi(contract);\n\n    // Create the action data\n    const actionData: Action[] = [];\n\n    actions.forEach((data) => {\n        actionData.push(Action.from({ ...data, account: contract }, abi.abi));\n    });\n\n    // Construct the transaction\n    const info = await api.v1.chain.get_info();\n    const header = info.getTransactionHeader();\n    const transaction = Transaction.from({\n        ...header,\n        actions: actionData,\n    });\n\n    // Create signature\n    const signDigest = transaction.signingDigest(info.chain_id);\n    const signature = await signer.sign(signDigest);\n    const signedTransaction = SignedTransaction.from({\n        ...transaction,\n        signatures: [signature],\n    });\n\n    // Send to the node\n    let res;\n\n    try {\n        res = await api.v1.chain.push_transaction(signedTransaction);\n    } catch (e) {\n        const error = e as any;\n\n        if (error.response && error.response.headers) {\n            if (error.response.json) {\n                throw new AntelopePushTransactionError(error.response.json);\n            }\n\n            throw new HttpError(error);\n        }\n\n        throw e;\n    }\n\n    return res;\n}\n\nexport { transact, Signer, createSigner, createKeyManagerSigner };\n","import { Checksum256, PrivateKey, PublicKey, Signature } from '@greymass/eosio';\r\n\r\nenum KeyManagerLevel {\r\n    PASSWORD = 'PASSWORD',\r\n    PIN = 'PIN',\r\n    FINGERPRINT = 'FINGERPRINT',\r\n    LOCAL = 'LOCAL',\r\n    BROWSER_LOCAL_STORAGE = 'BROWSER_LOCAL_STORAGE',\r\n    BROWSER_SESSION_STORAGE = 'BROWSER_SESSION_STORAGE',\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace KeyManagerLevel {\r\n    /*\r\n     * Returns the index of the enum value\r\n     *\r\n     * @param value The level to get the index of\r\n     */\r\n    export function indexFor(value: KeyManagerLevel): number {\r\n        return Object.keys(KeyManagerLevel).indexOf(value);\r\n    }\r\n\r\n    /*\r\n     * Creates an AuthenticatorLevel from a string or index of the level\r\n     *\r\n     * @param value The string or index\r\n     */\r\n    export function from(value: number | string): KeyManagerLevel {\r\n        let index: number;\r\n\r\n        if (typeof value !== 'number') {\r\n            index = KeyManagerLevel.indexFor(value as KeyManagerLevel);\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        return Object.values(KeyManagerLevel)[index] as KeyManagerLevel;\r\n    }\r\n}\r\n\r\n/**\r\n * @param level - The security level of the key\r\n * @param privateKey - The private key to be stored\r\n * @param [challenge] - A challenge that needs to be presented in order for the key to be used\r\n */\r\ntype StoreKeyOptions = {\r\n    level: KeyManagerLevel;\r\n    privateKey: PrivateKey;\r\n    challenge?: string;\r\n};\r\n\r\n/**\r\n * @param level - The security level of the key\r\n * @param data - The data that will be used to create a digital signature\r\n * @param [challenge] - A challenge that needs to be presented in order for the key to be used\r\n */\r\ntype SignDataOptions = {\r\n    level: KeyManagerLevel;\r\n    data: string | Checksum256;\r\n    challenge?: string;\r\n    outputType?: 'jwt' | 'transaction';\r\n};\r\n\r\n/**\r\n * @param level - The security level of the key\r\n */\r\n\r\ntype GetKeyOptions = {\r\n    level: KeyManagerLevel;\r\n};\r\n\r\n/**\r\n * @param level - The security level of the key\r\n * @param challenge - the challenge to check\r\n */\r\ntype CheckKeyOptions = {\r\n    level: KeyManagerLevel;\r\n    challenge: string;\r\n};\r\n\r\ninterface KeyManager {\r\n    /**\r\n     * Stores a private key that can be used later for signing.\r\n     *\r\n     * @remarks\r\n     * Once a private key is stored, it may no longer be accessible.\r\n     *\r\n     * @param options - Options for storing the key\r\n     * @returns The PublicKey\r\n     */\r\n    storeKey(options: StoreKeyOptions): Promise<PublicKey>;\r\n\r\n    /**\r\n     * Signs the hash of data with a stored private key\r\n     *\r\n     * @param options - Options for signing data\r\n     * @returns A digital signature of the SHA256 hashed data\r\n     *\r\n     * @throws if a key does not exist for the level the challenge is incorrect\r\n     */\r\n    signData(options: SignDataOptions): Promise<string | Signature>;\r\n\r\n    /**\r\n     * Returns the public key of a stored private key\r\n     *\r\n     * @param options - Options for retreiving the key\r\n     * @returns The PublicKey or null if no key exists\r\n     */\r\n    getKey(options: GetKeyOptions): Promise<PublicKey | null>;\r\n\r\n    /**\r\n     * @param options - Options for removing a key\r\n     * @throws if a key does not exist for the level\r\n     */\r\n    removeKey(options: GetKeyOptions): Promise<void>;\r\n\r\n    /**\r\n     * generates a random private key\r\n     *\r\n     * @returns The PrivateKey\r\n     */\r\n    generateRandomPrivateKey(): PrivateKey;\r\n\r\n    /**\r\n     * generates a private key from a password and creates random salt\r\n     * @param password password to encrypt the private key with\r\n     * @returns encrypted private key and salt\r\n     *\r\n     */\r\n    generatePrivateKeyFromPassword(\r\n        password: string,\r\n        salt?: Checksum256\r\n    ): Promise<{ privateKey: PrivateKey; salt: Checksum256 }>;\r\n\r\n    /**\r\n     * checks the key against the provided challenge\r\n     * @param {CheckKeyOptions} options - for checking key with level, and challenge\r\n     * @returns {boolean} - returns matching status\r\n     *\r\n     * @throws  if challenge is not provided\r\n     */\r\n    checkKey(options: CheckKeyOptions): Promise<boolean>;\r\n}\r\n\r\nexport { KeyManager, KeyManagerLevel, StoreKeyOptions, SignDataOptions, GetKeyOptions, CheckKeyOptions };\r\n","import { throwError } from './errors';\r\n\r\nexport interface PersistentStorageClean {\r\n    clear: () => Promise<void>;\r\n}\r\n\r\n// TODO make into abstract class which constructs with cache and scope\r\nexport interface PersistentStorage extends PersistentStorageClean {\r\n    [x: string]: any; // this makes sure that the storage can be accessed with any key\r\n    scope: string;\r\n\r\n    /**\r\n     * @param key - The key to store the data under\r\n     * @param data - The data to store\r\n     * @throws {Error} If the data could not be stored\r\n     */\r\n    store(key: string, value: any): Promise<void>;\r\n\r\n    /**\r\n     * @param key - The key to retrieve the data from\r\n     * @returns The data stored under the key\r\n     * @throws {Error} If the data could not be retrieved\r\n     */\r\n    // TODO change to get()?\r\n    retrieve(key: string): Promise<any>;\r\n\r\n    // TODO remove item function\r\n    // remove(key: string): Promise<void>;\r\n\r\n    /**\r\n     * clear all the data stored in the storage\r\n     */\r\n    clear(): Promise<void>;\r\n}\r\n\r\ninterface Storage extends Omit<ProxyHandler<PersistentStorage>, 'set'> {\r\n    set(target: PersistentStorage, key: string, value: any): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * A proxy handler that will create magic getters and setters for the storage\r\n */\r\nexport const storageProxyHandler: Storage = {\r\n    /**\r\n     * return the called property from the storage if it exists\r\n     * @param target - The target object\r\n     * @param key - The property key\r\n     * @returns The value of the property from the storage or cached value\r\n     * @throws {Error} If the data could not be retrieved\r\n     */\r\n    get: (target: PersistentStorage, key: string) => {\r\n        if (key === 'scope') throwError('Scope is a reserved key');\r\n        if (key === 'cache') throwError('Cache is a reserved key');\r\n\r\n        const scopedKey = target.scope + key;\r\n\r\n        if (key in target) {\r\n            if (key === 'clear') {\r\n                target.cache = {};\r\n            }\r\n            return function () {\r\n                target[key]();\r\n            };\r\n        }\r\n        if (target.cache[scopedKey]) return target.cache[scopedKey];\r\n\r\n        return target\r\n            .retrieve(scopedKey)\r\n            .then((data) => {\r\n                target.cache[scopedKey] = data; // cache the data\r\n                return data;\r\n            })\r\n            .catch((e) => {\r\n                throwError(`Could not get ${scopedKey} from storage - ${e}`);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * store the value in the storage\r\n     * @param target - The target object\r\n     * @param key - The property key\r\n     * @param value - The value to store\r\n     * @returns true if the value was stored\r\n     * @throws {Error} If the data could not be stored\r\n     */\r\n    set: async function (target: PersistentStorage, key: string, value: any) {\r\n        const scopedKey = target.scope + key;\r\n\r\n        return target\r\n            .store(scopedKey, value)\r\n            .then(() => {\r\n                target.cache[scopedKey] = value;\r\n                return true;\r\n            })\r\n            .catch(() => {\r\n                return false;\r\n                // throw new Error(`Could not store data - ${e}`);\r\n            });\r\n    },\r\n};\r\n\r\nexport type StorageFactory = (scope: string) => PersistentStorage;\r\n\r\nexport function createStorage<T>(scope: string, storageFactory: StorageFactory): T & PersistentStorageClean {\r\n    const storage = storageFactory(scope);\r\n    storage.cache = {};\r\n    const proxy = new Proxy(storage, storageProxyHandler as any) as any;\r\n\r\n    return proxy as T & PersistentStorageClean;\r\n}\r\n","import { Bytes, Checksum256, KeyType, PrivateKey, PublicKey } from '@greymass/eosio';\nimport rb from '@consento/sync-randombytes';\nimport elliptic from 'elliptic';\nimport { SdkErrors, throwError } from '../services/errors';\nimport { KeyManager, KeyManagerLevel } from '../services/keymanager';\n\nconst secp256k1 = new elliptic.ec('secp256k1');\n\nexport function randomBytes(bytes: number): Uint8Array {\n    return rb(new Uint8Array(bytes));\n}\n\nfunction validateKey(keyPair: elliptic.ec.KeyPair) {\n    const result = keyPair.validate();\n\n    if (!result.result) {\n        throwError(`Key not valid with reason ${result.reason}`, SdkErrors.InvalidKey);\n    }\n}\n\nexport function toElliptic(key: PrivateKey | PublicKey): elliptic.ec.KeyPair {\n    let ecKeyPair: elliptic.ec.KeyPair;\n\n    if (key instanceof PublicKey) {\n        ecKeyPair = secp256k1.keyFromPublic(key.data.array);\n    } else {\n        ecKeyPair = secp256k1.keyFromPrivate(key.data.array);\n    }\n\n    validateKey(ecKeyPair);\n\n    return ecKeyPair;\n}\n\nexport function randomString(bytes: number): string {\n    const random = rb(new Uint8Array(bytes));\n\n    return Array.from(random).map(int2hex).join('');\n}\n\nexport function sha256(digest: string): string {\n    return Checksum256.hash(Bytes.from(encodeHex(digest), 'hex')).toString();\n}\n\nexport function int2hex(i: number) {\n    return ('0' + i.toString(16)).slice(-2);\n}\n\nexport function encodeHex(str: string): string {\n    return str\n        .split('')\n        .map((c) => c.charCodeAt(0).toString(16).padStart(2, '0'))\n        .join('');\n}\n\nexport function decodeHex(hex: string): string {\n    return hex\n        .split(/(\\w\\w)/g)\n        .filter((p) => !!p)\n        .map((c) => String.fromCharCode(parseInt(c, 16)))\n        .join('');\n}\n\nexport function generateRandomKeyPair(): { privateKey: PrivateKey; publicKey: PublicKey } {\n    const bytes = randomBytes(32);\n    const privateKey = new PrivateKey(KeyType.K1, new Bytes(bytes));\n    const publicKey = privateKey.toPublic();\n\n    return { privateKey, publicKey };\n}\n\nexport function createVCSigner(keyManager: KeyManager, level: KeyManagerLevel) {\n    return {\n        async sign(data: string) {\n            return await keyManager.signData({\n                level,\n                data,\n                outputType: 'jwt',\n            });\n        },\n    };\n}\n","import { sha256 } from '../util/crypto';\r\n\r\nenum AccountType {\r\n    PERSON = 'PERSON',\r\n    ORG = 'ORG',\r\n    APP = 'APP',\r\n    GOV = 'GOV',\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace AccountType {\r\n    /*\r\n     * Returns the index of the enum value\r\n     *\r\n     * @param value The level to get the index of\r\n     */\r\n    export function indexFor(value: AccountType): number {\r\n        return Object.keys(AccountType).indexOf(value);\r\n    }\r\n\r\n    /*\r\n     * Creates an AccountType from a string or index of the level\r\n     *\r\n     * @param value The string or index\r\n     */\r\n    export function from(value: number | string): AccountType {\r\n        let index: number;\r\n\r\n        if (typeof value !== 'number') {\r\n            index = AccountType.indexFor(value as AccountType);\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        return Object.values(AccountType)[index] as AccountType;\r\n    }\r\n\r\n    export function getPreSuffix(value: AccountType): string {\r\n        return value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport { AccountType };\r\n\r\nexport class TonomyUsername {\r\n    username?: string;\r\n    usernameHash: string;\r\n\r\n    constructor(username: string, hashed = false) {\r\n        if (hashed) {\r\n            this.usernameHash = username;\r\n        } else {\r\n            this.username = username;\r\n            this.usernameHash = sha256(this.username);\r\n        }\r\n    }\r\n\r\n    static fromHash(usernameHash: string): TonomyUsername {\r\n        return new TonomyUsername(usernameHash, true);\r\n    }\r\n\r\n    static fromUsername(username: string, type: AccountType, suffix: string) {\r\n        const fullUsername = username + '.' + AccountType.getPreSuffix(type) + suffix;\r\n\r\n        return new TonomyUsername(fullUsername);\r\n    }\r\n\r\n    static fromFullUsername(username: string): TonomyUsername {\r\n        return new TonomyUsername(username);\r\n    }\r\n\r\n    getBaseUsername() {\r\n        return this.username?.split('.')[0];\r\n    }\r\n}\r\n","/* eslint-disable camelcase */\nimport { API, Checksum256, Name, PublicKey } from '@greymass/eosio';\nimport { TonomyUsername } from '../username';\nimport { getApi } from '../eosio/eosio';\nimport { Signer, transact } from '../eosio/transaction';\nimport { SdkErrors, throwError } from '../errors';\nimport { sha256 } from '../../util/crypto';\n\nenum PermissionLevel {\n    OWNER = 'OWNER',\n    ACTIVE = 'ACTIVE',\n    PASSWORD = 'PASSWORD',\n    PIN = 'PIN',\n    FINGERPRINT = 'FINGERPRINT',\n    LOCAL = 'LOCAL',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace PermissionLevel {\n    /*\n     * Returns the index of the enum value\n     *\n     * @param value The value to get the index of\n     */\n    export function indexFor(value: PermissionLevel): number {\n        return Object.keys(PermissionLevel).indexOf(value);\n    }\n\n    /*\n     * Creates an PermissionLevel from a string or index of the level\n     *\n     * @param value The string or index\n     */\n    export function from(value: number | string): PermissionLevel {\n        let index: number;\n\n        if (typeof value !== 'number') {\n            index = PermissionLevel.indexFor(value as PermissionLevel);\n        } else {\n            index = value;\n        }\n\n        return Object.values(PermissionLevel)[index] as PermissionLevel;\n    }\n}\n\ntype GetPersonResponse = {\n    account_name: Name;\n    status: number;\n    username_hash: Checksum256;\n    password_salt: Checksum256;\n    version: number;\n};\n\ntype AppTableRecord = {\n    account_name: Name;\n    app_name: string;\n    username_hash: Checksum256;\n    description: string;\n    logo_url: string;\n    origin: string;\n    version: number;\n};\n\nclass IDContract {\n    static singletonInstance: IDContract;\n\n    public static get Instance() {\n        return this.singletonInstance || (this.singletonInstance = new this());\n    }\n\n    async newperson(\n        username_hash: string,\n        password_key: string,\n        password_salt: string,\n        signer: Signer\n    ): Promise<API.v1.PushTransactionResponse> {\n        const action = {\n            authorization: [\n                {\n                    actor: 'id.tonomy',\n                    permission: 'active',\n                },\n            ],\n            account: 'id.tonomy',\n            name: 'newperson',\n            data: {\n                username_hash,\n                password_key,\n                password_salt,\n            },\n        };\n\n        return await transact(Name.from('id.tonomy'), [action], signer);\n    }\n\n    async updatekeysper(\n        account: string,\n        keys: {\n            FINGERPRINT?: string;\n            PIN?: string;\n            LOCAL?: string;\n        },\n        signer: Signer\n    ): Promise<API.v1.PushTransactionResponse> {\n        const actions = [];\n\n        if (Object.keys(keys).length === 0)\n            throwError('At least one key must be provided', SdkErrors.UpdateKeysTransactionNoKeys);\n\n        for (const key in keys) {\n            const permission = PermissionLevel.from(key);\n\n            // \"keys as any\" fixes typescript issue see https://stackoverflow.com/a/57192972\n            const publicKey = (keys as any)[key];\n\n            actions.push({\n                authorization: [\n                    {\n                        actor: account,\n                        permission: 'active',\n                    },\n                ],\n                account: 'id.tonomy',\n                name: 'updatekeyper',\n                data: {\n                    account,\n                    permission: PermissionLevel.indexFor(permission),\n                    key: publicKey,\n                },\n            });\n        }\n\n        return await transact(Name.from('id.tonomy'), actions, signer);\n    }\n\n    async newapp(\n        app_name: string,\n        description: string,\n        username_hash: string,\n        logo_url: string,\n        origin: string,\n        key: PublicKey,\n        signer: Signer\n    ): Promise<API.v1.PushTransactionResponse> {\n        /^(((http:\\/\\/)|(https:\\/\\/))?)(([a-zA-Z0-9.])+)((:{1}[0-9]+)?)$/g.test(origin);\n        /^(((http:\\/\\/)|(https:\\/\\/))?)(([a-zA-Z0-9.])+)((:{1}[0-9]+)?)([?#/a-zA-Z0-9.]*)$/g.test(logo_url);\n\n        const action = {\n            authorization: [\n                {\n                    actor: 'id.tonomy',\n                    permission: 'active',\n                },\n            ],\n            account: 'id.tonomy',\n            name: 'newapp',\n            data: {\n                app_name,\n                description,\n                logo_url,\n                origin: origin,\n                username_hash,\n                key,\n            },\n        };\n\n        return await transact(Name.from('id.tonomy'), [action], signer);\n    }\n\n    async loginwithapp(\n        account: string,\n        app: string,\n        parent: string,\n        key: PublicKey,\n        signer: Signer\n    ): Promise<API.v1.PushTransactionResponse> {\n        const action = {\n            authorization: [\n                {\n                    actor: account,\n                    permission: parent,\n                },\n            ],\n            account: 'id.tonomy',\n            name: 'loginwithapp',\n            data: {\n                account,\n                app,\n                parent,\n                key,\n            },\n        };\n\n        return await transact(Name.from('id.tonomy'), [action], signer);\n    }\n\n    async getPerson(account: TonomyUsername | Name): Promise<GetPersonResponse> {\n        let data;\n        const api = await getApi();\n\n        if (account instanceof TonomyUsername) {\n            // this is a username\n            const usernameHash = account.usernameHash;\n\n            data = await api.v1.chain.get_table_rows({\n                code: 'id.tonomy',\n                scope: 'id.tonomy',\n                table: 'people',\n                // eslint-disable-next-line camelcase\n                lower_bound: Checksum256.from(usernameHash),\n                limit: 1,\n                // eslint-disable-next-line camelcase\n                index_position: 'secondary',\n            });\n            if (!data || !data.rows) throwError('No data found', SdkErrors.DataQueryNoRowDataFound);\n\n            if (data.rows.length === 0 || data.rows[0].username_hash.toString() !== usernameHash) {\n                throwError('Person with username \"' + account.username + '\" not found', SdkErrors.UsernameNotFound);\n            }\n        } else {\n            // use the account name directly\n            data = await api.v1.chain.get_table_rows({\n                code: 'id.tonomy',\n                scope: 'id.tonomy',\n                table: 'people',\n                // eslint-disable-next-line camelcase\n                lower_bound: account,\n                limit: 1,\n            });\n            if (!data || !data.rows) throwError('No data found', SdkErrors.DataQueryNoRowDataFound);\n\n            if (data.rows.length === 0 || data.rows[0].account_name !== account.toString()) {\n                throwError(\n                    'Person with account name \"' + account.toString() + '\" not found',\n                    SdkErrors.AccountDoesntExist\n                );\n            }\n        }\n\n        const idData = data.rows[0];\n\n        return {\n            // eslint-disable-next-line camelcase\n            account_name: Name.from(idData.account_name),\n            status: idData.status,\n            // eslint-disable-next-line camelcase\n            username_hash: Checksum256.from(idData.username_hash),\n            // eslint-disable-next-line camelcase\n            password_salt: Checksum256.from(idData.password_salt),\n            version: idData.version,\n        };\n    }\n\n    async getApp(account: TonomyUsername | Name | string): Promise<AppTableRecord> {\n        let data;\n        const api = await getApi();\n\n        if (account instanceof TonomyUsername) {\n            // this is a username\n            const usernameHash = account.usernameHash;\n\n            data = await api.v1.chain.get_table_rows({\n                code: 'id.tonomy',\n                scope: 'id.tonomy',\n                table: 'apps',\n                // eslint-disable-next-line camelcase\n                lower_bound: Checksum256.from(usernameHash),\n                limit: 1,\n                // eslint-disable-next-line camelcase\n                index_position: 'secondary',\n            });\n            if (!data || !data.rows) throwError('No data found', SdkErrors.DataQueryNoRowDataFound);\n\n            if (data.rows.length === 0 || data.rows[0].username_hash.toString() !== usernameHash) {\n                throwError('Account with username \"' + account.username + '\" not found', SdkErrors.UsernameNotFound);\n            }\n        } else if (account instanceof Name) {\n            // use the account name directly\n            data = await api.v1.chain.get_table_rows({\n                code: 'id.tonomy',\n                scope: 'id.tonomy',\n                table: 'apps',\n                // eslint-disable-next-line camelcase\n                lower_bound: account,\n                limit: 1,\n            });\n            if (!data || !data.rows) throwError('No data found', SdkErrors.DataQueryNoRowDataFound);\n\n            if (data.rows.length === 0 || data.rows[0].account_name !== account.toString()) {\n                throwError('Account \"' + account.toString() + '\" not found', SdkErrors.AccountDoesntExist);\n            }\n        } else {\n            // account is the origin\n            const origin = account;\n            const originHash = sha256(origin);\n\n            data = await api.v1.chain.get_table_rows({\n                code: 'id.tonomy',\n                scope: 'id.tonomy',\n                table: 'apps',\n                // eslint-disable-next-line camelcase\n                lower_bound: Checksum256.from(originHash),\n                limit: 1,\n                // eslint-disable-next-line camelcase\n                index_position: 'tertiary',\n            });\n            if (!data || !data.rows) throwError('No data found', SdkErrors.DataQueryNoRowDataFound);\n\n            if (data.rows.length === 0 || data.rows[0].origin !== origin) {\n                throwError('Account with origin \"' + origin + '\" not found', SdkErrors.OriginNotFound);\n            }\n        }\n\n        const idData = data.rows[0];\n\n        return {\n            // eslint-disable-next-line camelcase\n            app_name: idData.app_name,\n            description: idData.description,\n            // eslint-disable-next-line camelcase\n            logo_url: idData.logo_url,\n            origin: idData.origin,\n            // eslint-disable-next-line camelcase\n            account_name: Name.from(idData.account_name),\n            // eslint-disable-next-line camelcase\n            username_hash: Checksum256.from(idData.username_hash),\n            version: idData.version,\n        };\n    }\n}\n\nexport { IDContract, GetPersonResponse };\n","// https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10-million-password-list-top-100.txt\nexport const top100Passwords = [\n    '123456',\n    'password',\n    '12345678',\n    'qwerty',\n    '123456789',\n    '12345',\n    '1234',\n    '111111',\n    '1234567',\n    'dragon',\n    '123123',\n    'baseball',\n    'abc123',\n    'football',\n    'monkey',\n    'letmein',\n    '696969',\n    'shadow',\n    'master',\n    '666666',\n    'qwertyuiop',\n    '123321',\n    'mustang',\n    '1234567890',\n    'michael',\n    '654321',\n    'pussy',\n    'superman',\n    '1qaz2wsx',\n    '7777777',\n    'fuckyou',\n    '121212',\n    //    '0',\n    'qazwsx',\n    '123qwe',\n    'killer',\n    'trustno1',\n    'jordan',\n    'jennifer',\n    'zxcvbnm',\n    'asdfgh',\n    'hunter',\n    'buster',\n    'soccer',\n    'harley',\n    'batman',\n    'andrew',\n    'tigger',\n    'sunshine',\n    'iloveyou',\n    'fuckme',\n    '2000',\n    'charlie',\n    'robert',\n    'thomas',\n    'hockey',\n    'ranger',\n    'daniel',\n    'starwars',\n    'klaster',\n    '112233',\n    'george',\n    'asshole',\n    'computer',\n    'michelle',\n    'jessica',\n    'pepper',\n    '1111',\n    'zxcvbn',\n    '555555',\n    '11111111',\n    '131313',\n    'freedom',\n    '777777',\n    'pass',\n    'fuck',\n    'maggie',\n    '159753',\n    'aaaaaa',\n    'ginger',\n    'princess',\n    'joshua',\n    'cheese',\n    'amanda',\n    'summer',\n    'love',\n    'ashley',\n    '6969',\n    'nicole',\n    'chelsea',\n    'biteme',\n    'matthew',\n    'access',\n    'yankees',\n    '987654321',\n    'dallas',\n    'austin',\n    'thunder',\n    'taylor',\n    'matrix',\n    'minecraft',\n];\n","import { SdkErrors, throwError } from '../services/errors';\r\nimport { top100Passwords } from './top100Passwords';\r\n\r\nexport function validatePassword(masterPassword: string): string {\r\n    const normalizedPassword = masterPassword.normalize('NFKC');\r\n    // minimum 12 characters\r\n    // at least 1 lowercase, 1 uppercase, 1 number\r\n    if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{12,}$/.test(normalizedPassword)) {\r\n        throwError('Password is invalid', SdkErrors.PasswordFormatInvalid);\r\n    }\r\n\r\n    for (const password of top100Passwords) {\r\n        if (normalizedPassword.toLowerCase().includes(password))\r\n            throwError('Password contains words or phrases that are too common', SdkErrors.PasswordTooCommon);\r\n    }\r\n\r\n    return normalizedPassword;\r\n}\r\n","/* eslint-disable camelcase */\r\nimport { Name, PrivateKey, PublicKey } from '@greymass/eosio';\r\nimport { IDContract } from './services/contracts/IDContract';\r\nimport { createSigner } from './services/eosio/transaction';\r\nimport { getSettings } from './settings';\r\nimport { AccountType, TonomyUsername } from './services/username';\r\nconst idContract = IDContract.Instance;\r\n\r\nenum AppStatus {\r\n    PENDING = 'PENDING',\r\n    CREATING = 'CREATING',\r\n    READY = 'READY',\r\n    DEACTIVATED = 'DEACTIVATED',\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace AppStatus {\r\n    /*\r\n     * Returns the index of the enum value\r\n     *\r\n     * @param value The level to get the index of\r\n     */\r\n    export function indexFor(value: AppStatus): number {\r\n        return Object.keys(AppStatus).indexOf(value);\r\n    }\r\n\r\n    /*\r\n     * Creates an AppStatus from a string or index of the level\r\n     *\r\n     * @param value The string or index\r\n     */\r\n    export function from(value: number | string): AppStatus {\r\n        let index: number;\r\n        if (typeof value !== 'number') {\r\n            index = AppStatus.indexFor(value as AppStatus);\r\n        } else {\r\n            index = value;\r\n        }\r\n        return Object.values(AppStatus)[index] as AppStatus;\r\n    }\r\n}\r\n\r\nexport { AppStatus };\r\n\r\nexport interface AppData {\r\n    accountName: Name;\r\n    appName: string;\r\n    username: TonomyUsername;\r\n    description: string;\r\n    logoUrl: string;\r\n    origin: string;\r\n    version: number;\r\n    status: AppStatus;\r\n}\r\n\r\nexport type AppCreateOptions = {\r\n    usernamePrefix: string;\r\n    appName: string;\r\n    description: string;\r\n    logoUrl: string;\r\n    origin: string;\r\n    publicKey: PublicKey;\r\n};\r\n\r\nexport class App implements AppData {\r\n    accountName: Name;\r\n    appName: string;\r\n    username: TonomyUsername;\r\n    description: string;\r\n    logoUrl: string;\r\n    origin: string;\r\n    version: number;\r\n    status: AppStatus;\r\n\r\n    constructor(options: AppData) {\r\n        this.accountName = options.accountName;\r\n        this.appName = options.appName;\r\n        this.username = options.username;\r\n        this.description = options.description;\r\n        this.logoUrl = options.logoUrl;\r\n        this.origin = options.origin;\r\n        this.version = options.version;\r\n        this.status = options.status;\r\n    }\r\n\r\n    static async create(options: AppCreateOptions): Promise<App> {\r\n        const username = TonomyUsername.fromUsername(\r\n            options.usernamePrefix,\r\n            AccountType.APP,\r\n            getSettings().accountSuffix\r\n        );\r\n\r\n        // TODO remove this\r\n        const privateKey = PrivateKey.from('PVT_K1_2bfGi9rYsXQSXXTvJbDAPhHLQUojjaNLomdm3cEJ1XTzMqUt3V');\r\n\r\n        const res = await idContract.newapp(\r\n            options.appName,\r\n            options.description,\r\n            username.usernameHash,\r\n            options.logoUrl,\r\n            options.origin,\r\n            options.publicKey,\r\n            createSigner(privateKey)\r\n        );\r\n\r\n        const newAccountAction = res.processed.action_traces[0].inline_traces[0].act;\r\n\r\n        return new App({\r\n            ...options,\r\n            accountName: Name.from(newAccountAction.data.name),\r\n            username,\r\n            version: newAccountAction.data.version,\r\n            status: AppStatus.READY,\r\n        });\r\n    }\r\n\r\n    static async getApp(origin: string): Promise<App> {\r\n        const contractAppData = await idContract.getApp(origin);\r\n\r\n        return new App({\r\n            accountName: contractAppData.account_name,\r\n            appName: contractAppData.app_name,\r\n            username: TonomyUsername.fromHash(contractAppData.username_hash.toString()),\r\n            description: contractAppData.description,\r\n            logoUrl: contractAppData.logo_url,\r\n            origin: contractAppData.origin,\r\n            version: contractAppData.version,\r\n            status: AppStatus.READY,\r\n        });\r\n    }\r\n}\r\n","import { BN } from 'bn.js';\n\n// Inspired by https://github.com/davidchambers/Base64.js/blob/master/base64.js\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst Base64 = {\n    btoa: (input = '') => {\n        const str = input;\n        let output = '';\n\n        for (\n            let block = 0, charCode, i = 0, map = chars;\n            str.charAt(i | 0) || ((map = '='), i % 1);\n            output += map.charAt(63 & (block >> (8 - (i % 1) * 8)))\n        ) {\n            charCode = str.charCodeAt((i += 3 / 4));\n\n            if (charCode > 0xff) {\n                throw new Error(\n                    \"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\"\n                );\n            }\n\n            block = (block << 8) | charCode;\n        }\n\n        return output;\n    },\n\n    atob: (input = '') => {\n        const str = input.replace(/=+$/, '');\n        let output = '';\n\n        if (str.length % 4 === 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n\n        for (\n            let bc = 0, bs = 0, buffer, i = 0;\n            (buffer = str.charAt(i++));\n            ~buffer && ((bs = bc % 4 ? bs * 64 + buffer : buffer), bc++ % 4)\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n                : 0\n        ) {\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    },\n};\n\n// Polyfill for React Native which does not have Buffer, or atob/btoa\n// TODO maybe do this at global level?\nif (typeof Buffer === 'undefined') {\n    if (typeof window === 'undefined' || typeof window.atob === 'undefined') {\n        window.atob = Base64.atob;\n        window.btoa = Base64.btoa;\n    }\n}\n\nexport function bnToBase64Url(bn: typeof BN): string {\n    if (typeof Buffer !== 'undefined') {\n        // nodejs\n        const buffer = (bn as any).toArrayLike(Buffer, 'be');\n\n        return Buffer.from(buffer).toString('base64');\n    } else {\n        // browser\n        return hexToBase64((bn as any).toString('hex'));\n    }\n}\n\nfunction hexToBase64(hexstring: string) {\n    return window.btoa(\n        (hexstring as any)\n            .match(/\\w{2}/g)\n            .map(function (a: string) {\n                return String.fromCharCode(parseInt(a, 16));\n            })\n            .join('')\n    );\n}\n\nexport function utf8ToB64(str: string) {\n    if (typeof Buffer !== 'undefined') {\n        // nodejs\n        return Buffer.from(str).toString('base64');\n    } else {\n        // browser\n        return window.btoa(unescape(encodeURIComponent(str)));\n    }\n}\n\nexport function b64ToUtf8(str: string) {\n    if (typeof Buffer !== 'undefined') {\n        // nodejs\n        return Buffer.from(str, 'base64').toString('utf8');\n    } else {\n        // browser\n        return decodeURIComponent(escape(window.atob(str)));\n    }\n}\n","import { PublicKey } from '@greymass/eosio';\nimport { toElliptic } from './crypto';\nimport { b64ToUtf8, bnToBase64Url, utf8ToB64 } from './base64';\n\nexport function createJWK(publicKey: PublicKey) {\n    const ecPubKey = toElliptic(publicKey);\n\n    const publicKeyJwk = {\n        crv: 'secp256k1',\n        kty: 'EC',\n        x: bnToBase64Url(ecPubKey.getPublic().getX() as any),\n        y: bnToBase64Url(ecPubKey.getPublic().getY() as any),\n        kid: publicKey.toString(),\n    };\n\n    return publicKeyJwk;\n}\n\n// reference https://github.com/OR13/did-jwk/blob/main/src/index.js#L120\nexport function toDid(jwk: any) {\n    // eslint-disable-next-line no-unused-vars\n    const { d, p, q, dp, dq, qi, ...publicKeyJwk } = jwk;\n    // TODO replace with base64url encoder for web\n    const id = utf8ToB64(JSON.stringify(publicKeyJwk));\n\n    const did = `did:jwk:${id}`;\n\n    return did;\n}\n\n// reference https://github.com/OR13/did-jwk/blob/main/src/index.js#L128\nexport function toDidDocument(jwk: any) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const getPublicOperationsFromPrivate = (keyOps: any) => {\n        if (keyOps.includes('sign')) {\n            return ['verify'];\n        }\n\n        if (keyOps.includes('verify')) {\n            return ['encrypt'];\n        }\n\n        return keyOps;\n    };\n    const {\n        // eslint-disable-next-line no-unused-vars\n        d,\n        p,\n        q,\n        dp,\n        dq,\n        qi,\n\n        // eslint-disable-next-line camelcase\n        key_ops,\n\n        ...publicKeyJwk\n    } = jwk;\n\n    // eslint-disable-next-line camelcase\n    if (d && key_ops) {\n        // eslint-disable-next-line camelcase\n        publicKeyJwk.key_ops = getPublicOperationsFromPrivate(key_ops);\n    }\n\n    const did = toDid(publicKeyJwk);\n    const vm = {\n        id: '#0',\n        type: 'JsonWebKey2020',\n        controller: did,\n        publicKeyJwk,\n    };\n    const didDocument = {\n        '@context': ['https://www.w3.org/ns/did/v1', { '@vocab': 'https://www.iana.org/assignments/jose#' }],\n        id: did,\n        verificationMethod: [vm],\n    };\n\n    return didDocument;\n}\n\n// reference https://github.com/OR13/did-jwk/blob/main/src/index.js#L177\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function resolve(did: any, options = {}) {\n    if (options) options = {};\n    const decoded = b64ToUtf8(did.split(':').pop().split('#')[0]);\n    const jwk = JSON.parse(decoded.toString());\n\n    return toDidDocument(jwk);\n}\n","import { decodeJWT } from '@tonomy/did-jwt';\r\nimport { Issuer, verifyCredential, W3CCredential } from '@tonomy/did-jwt-vc';\r\n\r\n// import { Resolver } from '@tonomy/did-resolver';\r\nimport { getSettings } from '../settings';\r\nimport { JWTDecoded } from '@tonomy/did-jwt/lib/JWT';\r\nimport crossFetch from 'cross-fetch';\r\nimport { getResolver } from '@tonomy/antelope-did-resolver';\r\nimport { Resolver } from '@tonomy/did-resolver';\r\nimport { issue, OutputType } from '@tonomy/antelope-ssi-toolkit';\r\nimport { resolve } from './did-jwk';\r\n\r\nexport class Message {\r\n    private decodedJwt: JWTDecoded;\r\n\r\n    /**\r\n     * creates a signed message and return message object\r\n     * @param message the messageResolver with the signer and the did\r\n     * @param recipient the recipient id\r\n     * @returns a message objects\r\n     */\r\n    static async sign(message: object, issuer: Issuer, recipient?: string): Promise<Message> {\r\n        const vc: W3CCredential = {\r\n            '@context': ['https://www.w3.org/2018/credentials/v1'],\r\n            id: 'https://example.com/id/1234324',\r\n            type: ['VerifiableCredential'],\r\n            issuer: {\r\n                id: issuer.did,\r\n            },\r\n            issuanceDate: new Date().toISOString(),\r\n            credentialSubject: {\r\n                message,\r\n            },\r\n        };\r\n\r\n        // add recipient to vc if given\r\n        if (recipient) vc.credentialSubject.id = recipient;\r\n\r\n        const result = await issue(vc, {\r\n            issuer: issuer,\r\n            outputType: OutputType.JWT,\r\n        });\r\n\r\n        return new Message(result);\r\n    }\r\n\r\n    constructor(public jwt: string) {\r\n        this.decodedJwt = decodeJWT(jwt);\r\n        this.jwt = jwt;\r\n    }\r\n\r\n    // Returns the sender of the message (iss property of the signed VC)\r\n    getSender(): string {\r\n        return this.decodedJwt.payload.iss as string;\r\n    }\r\n    // Returns the recipient of the message (sub property of the signed VC)\r\n    getRecipient(): string {\r\n        return this.decodedJwt.payload.sub as string;\r\n    }\r\n\r\n    // Returns the original unsigned payload\r\n    getPayload(): any {\r\n        return this.decodedJwt.payload.vc.credentialSubject.message;\r\n    }\r\n\r\n    // // Returns the message type (ignores VerifiableCredential type). This is used to determine what kind of message it is (login request, login request confirmation etc...) so the client can choose what to do with it\r\n    // getType(): string {}\r\n\r\n    /* Verifies the VC. True if valid\r\n     * this is setup to resolve did:antelope and did:jwk DIDs\r\n     */\r\n    async verify(): Promise<boolean> {\r\n        const settings = getSettings();\r\n\r\n        //TODO: use compatible resolver for the didjwk resolver\r\n        const jwkResolver: any = {\r\n            resolve,\r\n        };\r\n        // const resolver = {\r\n        //     resolve: new AntelopeDID({ fetch: crossFetch, antelopeChainUrl: settings.blockchainUrl }).resolve,\r\n        // };\r\n        const resolver = new Resolver({\r\n            ...getResolver({ antelopeChainUrl: settings.blockchainUrl, fetch: crossFetch as any }),\r\n        });\r\n\r\n        try {\r\n            const result = await Promise.any([\r\n                verifyCredential(this.jwt, { resolve: jwkResolver.resolve }),\r\n                verifyCredential(this.jwt, resolver),\r\n            ]);\r\n\r\n            return result.verified;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","/* eslint-disable camelcase */\r\nimport { Name, PublicKey } from '@greymass/eosio';\r\nimport { IDContract } from './services/contracts/IDContract';\r\nimport { KeyManager, KeyManagerLevel } from './services/keymanager';\r\nimport { createStorage, PersistentStorageClean, StorageFactory } from './services/storage';\r\nimport { User } from './user';\r\nimport { createKeyManagerSigner } from './services/eosio/transaction';\r\nimport { SdkErrors, throwError } from './services/errors';\r\nimport { App, AppStatus } from './app';\r\nimport { Message } from './util/message';\r\n\r\nconst idContract = IDContract.Instance;\r\n\r\nexport type UserAppRecord = {\r\n    app: App;\r\n    added: Date;\r\n    status: AppStatus;\r\n};\r\n\r\nexport type UserAppStorage = {\r\n    appRecords: UserAppRecord[];\r\n};\r\n\r\n// TODO change to use VC\r\nexport type JWTLoginPayload = {\r\n    randomString: string;\r\n    origin: string;\r\n    publicKey: string;\r\n    callbackPath?: string;\r\n};\r\n\r\nexport type OnPressLoginOptions = {\r\n    callbackPath: string;\r\n    redirect?: boolean;\r\n};\r\n\r\nexport class UserApps {\r\n    user: User;\r\n    keyManager: KeyManager;\r\n    storage: UserAppStorage & PersistentStorageClean;\r\n\r\n    constructor(_user: User, _keyManager: KeyManager, storageFactory: StorageFactory) {\r\n        this.user = _user;\r\n        this.keyManager = _keyManager;\r\n        this.storage = createStorage<UserAppStorage>('tonomy.user.apps.', storageFactory);\r\n    }\r\n\r\n    async loginWithApp(app: App, key: PublicKey): Promise<void> {\r\n        const myAccount = await this.user.storage.accountName;\r\n\r\n        const appRecord: UserAppRecord = {\r\n            app,\r\n            added: new Date(),\r\n            status: AppStatus.PENDING,\r\n        };\r\n\r\n        let apps = await this.storage.appRecords;\r\n\r\n        if (!apps) {\r\n            apps = [];\r\n        }\r\n\r\n        apps.push(appRecord);\r\n        this.storage.appRecords = apps;\r\n        await this.storage.appRecords;\r\n\r\n        const signer = createKeyManagerSigner(this.keyManager, KeyManagerLevel.LOCAL);\r\n\r\n        await idContract.loginwithapp(myAccount.toString(), app.accountName.toString(), 'local', key, signer);\r\n\r\n        appRecord.status = AppStatus.READY;\r\n        this.storage.appRecords = apps;\r\n        await this.storage.appRecords;\r\n    }\r\n\r\n    /**\r\n     * Verifies the login request are valid requests signed by valid DIDs\r\n     *\r\n     * @param requests {string | null} - a stringified array of JWTs\r\n     * @returns {Promise<Message[]>} - an array of verified messages containing the login requests\r\n     */\r\n    static async verifyRequests(requests: string | null): Promise<Message[]> {\r\n        if (!requests) throwError('No requests found in URL', SdkErrors.MissingParams);\r\n\r\n        const jwtRequests = JSON.parse(requests);\r\n\r\n        if (!jwtRequests || !Array.isArray(jwtRequests) || jwtRequests.length === 0) {\r\n            throwError('No JWTs found in URL', SdkErrors.MissingParams);\r\n        }\r\n\r\n        const verified: Message[] = [];\r\n\r\n        for (const jwt of jwtRequests) {\r\n            verified.push(await this.verifyLoginJWT(jwt));\r\n        }\r\n\r\n        return verified;\r\n    }\r\n\r\n    /**\r\n     * Extracts the login requests, username and accountName from the URL\r\n     *\r\n     * @returns the requests (JWTs), username and accountName\r\n     */\r\n    static getLoginRequestParams(): { requests: string; username: string; accountName: string } {\r\n        const params = new URLSearchParams(window.location.search);\r\n\r\n        const requests = params.get('requests');\r\n\r\n        if (!requests) throwError(\"requests parameter doesn't exists\", SdkErrors.MissingParams);\r\n\r\n        const username = params.get('username');\r\n\r\n        if (!username) throwError(\"username parameter doesn't exists\", SdkErrors.MissingParams);\r\n\r\n        const accountName = params.get('accountName');\r\n\r\n        if (!accountName) throwError(\"accountName parameter doesn't exists\", SdkErrors.MissingParams);\r\n\r\n        return { requests, username, accountName };\r\n    }\r\n\r\n    /**\r\n     * Verifies the login request received in the URL were successfully authorized by Tonomy ID\r\n     *\r\n     * @description should be called in the callback page of the SSO Login website\r\n     *\r\n     * @returns {Promise<Message>} - the verified login request\r\n     */\r\n    static async onRedirectLogin(): Promise<Message> {\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const requests = urlParams.get('requests');\r\n\r\n        const verifiedRequests = await UserApps.verifyRequests(requests);\r\n\r\n        const referrer = new URL(document.referrer);\r\n\r\n        for (const message of verifiedRequests) {\r\n            if (message.getPayload().origin === referrer.origin) {\r\n                return message;\r\n            }\r\n        }\r\n\r\n        throwError(\r\n            `No origins from: ${verifiedRequests.map((r) => r.getPayload().origin)} match referrer: ${referrer.origin}`,\r\n            SdkErrors.WrongOrigin\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Checks that a key exists in the key manager that has been authorized on the DID\r\n     *\r\n     * @description This is called on the callback page to verify that the user has logged in correctly\r\n     *\r\n     * @param accountName {string} - the account name to check the key on\r\n     * @param keyManager {KeyManager} - the key manager to check the key in\r\n     * @param keyManagerLevel {KeyManagerLevel=BROWSER_LOCAL_STORAGE} - the level to check the key in\r\n     * @returns {Promise<boolean>} - true if the key exists and is authorized, false otherwise\r\n     */\r\n    static async verifyKeyExistsForApp(\r\n        accountName: string,\r\n        keyManager: KeyManager,\r\n        keyManagerLevel: KeyManagerLevel = KeyManagerLevel.BROWSER_LOCAL_STORAGE\r\n    ): Promise<boolean> {\r\n        const pubKey = await keyManager.getKey({\r\n            level: keyManagerLevel,\r\n        });\r\n\r\n        if (!pubKey) throw throwError('key not found', SdkErrors.KeyNotFound);\r\n        const account = await User.getAccountInfo(Name.from(accountName));\r\n\r\n        if (!account) throwError(\"couldn't fetch account\", SdkErrors.AccountNotFound);\r\n        const app = await App.getApp(window.location.origin);\r\n\r\n        const publickey = account.getPermission(app.accountName).required_auth.keys[0].key;\r\n\r\n        return pubKey.toString() === publickey.toString();\r\n    }\r\n\r\n    /**\r\n     * Verifies a jwt string is a valid message with signature from a DID\r\n     * @param jwt {string} - the jwt string to verify\r\n     * @returns {Promise<Message>} - the verified message\r\n     */\r\n    static async verifyLoginJWT(jwt: string): Promise<Message> {\r\n        const message = new Message(jwt);\r\n        const res = await message.verify();\r\n\r\n        // TODO should check the keys in KeyManager are on the blockchain...\r\n\r\n        if (!res) throwError('JWT failed verification', SdkErrors.JwtNotValid);\r\n        return message;\r\n    }\r\n}\r\n","import { io, Socket } from 'socket.io-client';\r\nimport { createSdkError, SdkErrors } from './services/errors';\r\nimport { getSettings } from './settings';\r\nimport { Message } from './util/message';\r\n\r\nexport type Subscriber = (message: string) => void;\r\n\r\nexport class Communication {\r\n    socketServer: Socket;\r\n\r\n    /**\r\n     * Connects to the Tonomy Communication server\r\n     *\r\n     * @returns {Promise<void>}\r\n     * @throws {SdkError} CommunicationNotConnected\r\n     */\r\n    private async connect(): Promise<void> {\r\n        if (this.socketServer?.connected) return; // dont override socket if connected\r\n        const url = getSettings().communicationUrl;\r\n\r\n        this.socketServer = io(url, {\r\n            transports: ['websocket'],\r\n        });\r\n\r\n        await new Promise((resolve, reject) => {\r\n            this.socketServer.on('connect', () => {\r\n                resolve(true);\r\n                return;\r\n            });\r\n            setTimeout(() => {\r\n                if (this.socketServer.connected) return;\r\n\r\n                reject(\r\n                    createSdkError(\r\n                        'Could not connect to Tonomy Communication server',\r\n                        SdkErrors.CommunicationNotConnected\r\n                    )\r\n                );\r\n            }, 5000);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a Message object through a websocket connection to the Tonomy Communication server\r\n     *\r\n     * @param {string} event - the name of the event to emit\r\n     * @param {Message} message - the Message object to send\r\n     * @returns {Promise<boolean>} - true if successful and acknowledged by the server\r\n     * @throws {SdkError} - CommunicationTimeout\r\n     */\r\n    private async emitMessage(event: string, message: Message): Promise<boolean> {\r\n        return await new Promise((resolve, reject) => {\r\n            const resolved = false;\r\n\r\n            this.socketServer.emit(event, { message: message.jwt }, (response: any) => {\r\n                if (response.error) {\r\n                    reject(response);\r\n                }\r\n\r\n                resolve(response);\r\n                return;\r\n            });\r\n            setTimeout(() => {\r\n                if (resolved) return;\r\n                reject(\r\n                    createSdkError(\r\n                        'Connection timed out to Tonomy Communication server',\r\n                        SdkErrors.CommunicationTimeout\r\n                    )\r\n                );\r\n            }, 5000);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * connects to the Tonomy Communication server, authenticates with it's DID\r\n     * subscribes to any messages that are sent by `sendMessage` by providing a callback function executed every time a message is received\r\n     * should send a read receipt when messages are received\r\n     * @returns {boolean} - true if successful\r\n     */\r\n    async login(authorization: Message): Promise<boolean> {\r\n        await this.connect();\r\n\r\n        return await this.emitMessage('login', authorization);\r\n    }\r\n\r\n    /* sends a message to another DID\r\n     * create a Message object from the message argument\r\n     * the message is used as the `vc` property of a VC signed by the User's key\r\n     */\r\n    sendMessage(message: Message): Promise<boolean> {\r\n        return this.emitMessage('message', message);\r\n    }\r\n\r\n    // function that adds a new subscriber, which is called every time a message is received\r\n    subscribeMessage(subscriber: Subscriber): void {\r\n        this.socketServer.on('message', subscriber);\r\n    }\r\n\r\n    // unsubscribes a function from the receiving a message\r\n    unsubscribeMessage(subscriber: Subscriber) {\r\n        this.socketServer.off('message', subscriber);\r\n    }\r\n\r\n    disconnect() {\r\n        if (this.socketServer?.connected) {\r\n            this.socketServer.disconnect();\r\n        }\r\n    }\r\n}\r\n","import { Name, PrivateKey, API, Checksum256 } from '@greymass/eosio';\r\nimport { PushTransactionResponse } from '@greymass/eosio/src/api/v1/types';\r\nimport { KeyManager, KeyManagerLevel } from './services/keymanager';\r\nimport { GetPersonResponse, IDContract } from './services/contracts/IDContract';\r\nimport { AntelopePushTransactionError, createKeyManagerSigner, createSigner } from './services/eosio/transaction';\r\nimport { getApi, getChainInfo } from './services/eosio/eosio';\r\nimport { createStorage, PersistentStorageClean, StorageFactory } from './services/storage';\r\nimport { SdkErrors, throwError, SdkError } from './services/errors';\r\nimport { AccountType, TonomyUsername } from './services/username';\r\nimport { validatePassword } from './util/passwords';\r\nimport { UserApps } from './userApps';\r\nimport { getSettings } from './settings';\r\nimport { Communication } from './communication';\r\nimport { Message } from './util/message';\r\nimport { Issuer } from '@tonomy/did-jwt-vc';\r\nimport { createVCSigner } from './util/crypto';\r\n\r\nenum UserStatus {\r\n    CREATING_ACCOUNT = 'CREATING_ACCOUNT',\r\n    LOGGING_IN = 'LOGGING_IN',\r\n    READY = 'READY',\r\n    DEACTIVATED = 'DEACTIVATED',\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace UserStatus {\r\n    /*\r\n     * Returns the index of the enum value\r\n     *\r\n     * @param value The level to get the index of\r\n     */\r\n    export function indexFor(value: UserStatus): number {\r\n        return Object.keys(UserStatus).indexOf(value);\r\n    }\r\n\r\n    /*\r\n     * Creates an AuthenticatorLevel from a string or index of the level\r\n     *\r\n     * @param value The string or index\r\n     */\r\n    export function from(value: number | string): UserStatus {\r\n        let index: number;\r\n\r\n        if (typeof value !== 'number') {\r\n            index = UserStatus.indexFor(value as UserStatus);\r\n        } else {\r\n            index = value;\r\n        }\r\n\r\n        return Object.values(UserStatus)[index] as UserStatus;\r\n    }\r\n}\r\n\r\nexport { UserStatus };\r\n\r\nexport type UserStorage = {\r\n    status: UserStatus;\r\n    accountName: Name;\r\n    username: TonomyUsername;\r\n    salt: Checksum256;\r\n    did: string;\r\n    // TODO update to have all data from blockchain\r\n};\r\n\r\nconst idContract = IDContract.Instance;\r\n\r\nexport class User {\r\n    private chainID!: Checksum256;\r\n    keyManager: KeyManager;\r\n    storage: UserStorage & PersistentStorageClean;\r\n    apps: UserApps;\r\n    communication: Communication;\r\n\r\n    constructor(_keyManager: KeyManager, storageFactory: StorageFactory) {\r\n        this.keyManager = _keyManager;\r\n        this.storage = createStorage<UserStorage>('tonomy.user.', storageFactory);\r\n\r\n        this.apps = new UserApps(this, _keyManager, storageFactory);\r\n\r\n        //TODO implement dependency inversion\r\n        this.communication = new Communication();\r\n    }\r\n\r\n    async getStatus(): Promise<UserStatus> {\r\n        return await this.storage.status;\r\n    }\r\n\r\n    async getAccountName(): Promise<Name> {\r\n        return await this.storage.accountName;\r\n    }\r\n\r\n    async getUsername(): Promise<TonomyUsername> {\r\n        return await this.storage.username;\r\n    }\r\n\r\n    async getDid(): Promise<string> {\r\n        return await this.storage.did;\r\n    }\r\n\r\n    async saveUsername(username: string) {\r\n        const normalizedUsername = username.normalize('NFKC');\r\n\r\n        let user: API.v1.AccountObject;\r\n        const fullUsername = TonomyUsername.fromUsername(\r\n            normalizedUsername,\r\n            AccountType.PERSON,\r\n            getSettings().accountSuffix\r\n        );\r\n\r\n        try {\r\n            user = (await User.getAccountInfo(fullUsername)) as any; // Throws error if username is taken\r\n            if (user) throwError('Username is taken', SdkErrors.UsernameTaken);\r\n        } catch (e) {\r\n            if (!(e instanceof SdkError && e.code === SdkErrors.UsernameNotFound)) {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        this.storage.username = fullUsername;\r\n        await this.storage.username;\r\n    }\r\n\r\n    async savePassword(masterPassword: string, options?: { salt?: Checksum256 }) {\r\n        const password = validatePassword(masterPassword);\r\n\r\n        let privateKey: PrivateKey;\r\n        let salt: Checksum256;\r\n\r\n        if (options && options.salt) {\r\n            salt = options.salt;\r\n            const res = await this.keyManager.generatePrivateKeyFromPassword(password, salt);\r\n\r\n            privateKey = res.privateKey;\r\n        } else {\r\n            const res = await this.keyManager.generatePrivateKeyFromPassword(password);\r\n\r\n            privateKey = res.privateKey;\r\n            salt = res.salt;\r\n        }\r\n\r\n        this.storage.salt = salt;\r\n        await this.storage.salt; // wait for magic setter on storage\r\n\r\n        await this.keyManager.storeKey({\r\n            level: KeyManagerLevel.PASSWORD,\r\n            privateKey,\r\n            challenge: password,\r\n        });\r\n    }\r\n\r\n    async savePIN(pin: string) {\r\n        const privateKey = this.keyManager.generateRandomPrivateKey();\r\n\r\n        await this.keyManager.storeKey({\r\n            level: KeyManagerLevel.PIN,\r\n            privateKey,\r\n            challenge: pin,\r\n        });\r\n    }\r\n\r\n    async checkPin(pin: string): Promise<boolean> {\r\n        const pinKey = await this.keyManager.checkKey({\r\n            level: KeyManagerLevel.PIN,\r\n            challenge: pin,\r\n        });\r\n\r\n        if (!pinKey) throwError('Pin is incorrect', SdkErrors.PinInValid);\r\n        return true;\r\n    }\r\n\r\n    async saveFingerprint() {\r\n        const privateKey = this.keyManager.generateRandomPrivateKey();\r\n\r\n        await this.keyManager.storeKey({\r\n            level: KeyManagerLevel.FINGERPRINT,\r\n            privateKey,\r\n        });\r\n    }\r\n\r\n    async saveLocal() {\r\n        const privateKey = this.keyManager.generateRandomPrivateKey();\r\n\r\n        await this.keyManager.storeKey({\r\n            level: KeyManagerLevel.LOCAL,\r\n            privateKey,\r\n        });\r\n    }\r\n\r\n    async createPerson(): Promise<PushTransactionResponse> {\r\n        const { keyManager } = this;\r\n        const username = await this.storage.username;\r\n\r\n        const usernameHash = username.usernameHash;\r\n\r\n        const passwordKey = await keyManager.getKey({\r\n            level: KeyManagerLevel.PASSWORD,\r\n        });\r\n\r\n        if (!passwordKey) throwError('Password key not found', SdkErrors.KeyNotFound);\r\n\r\n        // TODO this needs to change to the actual key used, from settings\r\n        const idTonomyActiveKey = PrivateKey.from('PVT_K1_2bfGi9rYsXQSXXTvJbDAPhHLQUojjaNLomdm3cEJ1XTzMqUt3V');\r\n\r\n        const salt = await this.storage.salt;\r\n        let res: PushTransactionResponse;\r\n\r\n        try {\r\n            res = await idContract.newperson(\r\n                usernameHash.toString(),\r\n                passwordKey.toString(),\r\n                salt.toString(),\r\n                createSigner(idTonomyActiveKey)\r\n            );\r\n        } catch (e) {\r\n            if (e instanceof AntelopePushTransactionError) {\r\n                if (e.hasErrorCode(3050003) && e.hasTonomyErrorCode('TCON1000')) {\r\n                    throw throwError('Username is taken', SdkErrors.UsernameTaken);\r\n                }\r\n            }\r\n\r\n            throw e;\r\n        }\r\n\r\n        const newAccountAction = res.processed.action_traces[0].inline_traces[0].act;\r\n\r\n        this.storage.accountName = Name.from(newAccountAction.data.name);\r\n        await this.storage.accountName;\r\n\r\n        this.storage.status = UserStatus.CREATING_ACCOUNT;\r\n        await this.storage.status;\r\n        await this.createDid();\r\n\r\n        return res;\r\n    }\r\n\r\n    async updateKeys(password: string) {\r\n        const status = await this.getStatus();\r\n\r\n        if (status === UserStatus.DEACTIVATED) {\r\n            throw new Error(\"Can't update keys \");\r\n        }\r\n\r\n        const { keyManager } = this;\r\n\r\n        const pinKey = await keyManager.getKey({ level: KeyManagerLevel.PIN });\r\n        const fingerprintKey = await keyManager.getKey({\r\n            level: KeyManagerLevel.FINGERPRINT,\r\n        });\r\n        const localKey = await keyManager.getKey({ level: KeyManagerLevel.LOCAL });\r\n\r\n        // TODO:\r\n        // use status in smart contract to lock the account till finished creating\r\n        interface KeyInterface {\r\n            PIN: string;\r\n            FINGERPRINT: string;\r\n            LOCAL: string;\r\n        }\r\n\r\n        const keys = {} as KeyInterface;\r\n\r\n        if (pinKey) keys.PIN = pinKey.toString();\r\n        if (fingerprintKey) keys.FINGERPRINT = fingerprintKey.toString();\r\n        if (localKey) keys.LOCAL = localKey.toString();\r\n\r\n        const signer = createKeyManagerSigner(keyManager, KeyManagerLevel.PASSWORD, password);\r\n        const accountName = await this.storage.accountName;\r\n\r\n        await idContract.updatekeysper(accountName.toString(), keys, signer);\r\n        this.storage.status = UserStatus.READY;\r\n        await this.storage.status;\r\n    }\r\n\r\n    async checkPassword(password: string): Promise<boolean> {\r\n        const username = await this.getAccountName();\r\n\r\n        const idData = await idContract.getPerson(username);\r\n        const salt = idData.password_salt;\r\n\r\n        await this.savePassword(password, { salt });\r\n        const passwordKey = await this.keyManager.getKey({\r\n            level: KeyManagerLevel.PASSWORD,\r\n        });\r\n\r\n        const accountData = await User.getAccountInfo(idData.account_name);\r\n        const onchainKey = accountData.getPermission('owner').required_auth.keys[0].key; // TODO change to active/other permissions when we make the change\r\n\r\n        if (!passwordKey) throwError('Password key not found', SdkErrors.KeyNotFound);\r\n\r\n        if (passwordKey.toString() !== onchainKey.toString())\r\n            throwError('Password is incorrect', SdkErrors.PasswordInValid);\r\n\r\n        return true;\r\n    }\r\n\r\n    async login(username: TonomyUsername, password: string): Promise<GetPersonResponse> {\r\n        const { keyManager } = this;\r\n\r\n        const idData = await idContract.getPerson(username);\r\n        const salt = idData.password_salt;\r\n\r\n        await this.savePassword(password, { salt });\r\n        const passwordKey = await keyManager.getKey({\r\n            level: KeyManagerLevel.PASSWORD,\r\n        });\r\n\r\n        if (!passwordKey) throwError('Password key not found', SdkErrors.KeyNotFound);\r\n\r\n        const accountData = await User.getAccountInfo(idData.account_name);\r\n        const onchainKey = accountData.getPermission('owner').required_auth.keys[0].key; // TODO change to active/other permissions when we make the change\r\n\r\n        if (passwordKey.toString() !== onchainKey.toString())\r\n            throwError('Password is incorrect', SdkErrors.PasswordInValid);\r\n\r\n        this.storage.accountName = Name.from(idData.account_name);\r\n        this.storage.username = username;\r\n        this.storage.status = UserStatus.LOGGING_IN;\r\n\r\n        await this.storage.accountName;\r\n        await this.storage.username;\r\n        await this.storage.status;\r\n        await this.createDid();\r\n\r\n        return idData;\r\n    }\r\n\r\n    async checkKeysStillValid(): Promise<boolean> {\r\n        // Account been created, or has not finished being created yet\r\n        if (this.storage.status !== UserStatus.READY) throwError('User is not ready', SdkErrors.AccountDoesntExist);\r\n\r\n        const accountInfo = await User.getAccountInfo(await this.storage.accountName);\r\n\r\n        const checkPairs = [\r\n            {\r\n                level: KeyManagerLevel.PIN,\r\n                permission: 'pin',\r\n            },\r\n            {\r\n                level: KeyManagerLevel.FINGERPRINT,\r\n                permission: 'fingerprint',\r\n            },\r\n            {\r\n                level: KeyManagerLevel.LOCAL,\r\n                permission: 'local',\r\n            },\r\n            {\r\n                level: KeyManagerLevel.PASSWORD,\r\n                permission: 'active',\r\n            },\r\n            {\r\n                level: KeyManagerLevel.PASSWORD,\r\n                permission: 'owner',\r\n            },\r\n        ];\r\n\r\n        for (const pair of checkPairs) {\r\n            let localKey;\r\n\r\n            try {\r\n                localKey = await this.keyManager.getKey({ level: pair.level });\r\n            } catch (e) {\r\n                localKey = null;\r\n            }\r\n\r\n            let blockchainPermission;\r\n\r\n            try {\r\n                blockchainPermission = accountInfo.getPermission(pair.permission);\r\n            } catch (e) {\r\n                blockchainPermission = null;\r\n            }\r\n\r\n            if (!localKey && blockchainPermission) {\r\n                // User probably logged into another device and finished create account flow there\r\n                throwError(\r\n                    `${pair.level} key was not found in the keyManager, but was found on the blockchain`,\r\n                    SdkErrors.KeyNotFound\r\n                );\r\n            }\r\n\r\n            if (localKey && !blockchainPermission) {\r\n                // User probably hasn't finished create account flow yet\r\n                throwError(\r\n                    `${pair.level} keys was not found on the blockchain, but was found in the keyManager`,\r\n                    SdkErrors.KeyNotFound\r\n                );\r\n            }\r\n\r\n            if (\r\n                localKey &&\r\n                blockchainPermission &&\r\n                localKey.toString() !== blockchainPermission.required_auth.keys[0].key.toString()\r\n            ) {\r\n                // User has logged in on another device\r\n                throwError(`${pair.level} keys do not match`, SdkErrors.KeyNotFound);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    async logout(): Promise<void> {\r\n        // remove all keys\r\n        await this.keyManager.removeKey({ level: KeyManagerLevel.PASSWORD });\r\n        await this.keyManager.removeKey({ level: KeyManagerLevel.PIN });\r\n        await this.keyManager.removeKey({ level: KeyManagerLevel.FINGERPRINT });\r\n        await this.keyManager.removeKey({ level: KeyManagerLevel.LOCAL });\r\n        // clear storage data\r\n        this.storage.clear();\r\n\r\n        this.communication.disconnect();\r\n    }\r\n\r\n    async isLoggedIn(): Promise<boolean> {\r\n        return (await this.getStatus()) === UserStatus.READY;\r\n    }\r\n\r\n    static async getAccountInfo(account: TonomyUsername | Name): Promise<API.v1.AccountObject> {\r\n        try {\r\n            let accountName: Name;\r\n            const api = await getApi();\r\n\r\n            if (account instanceof TonomyUsername) {\r\n                const idData = await idContract.getPerson(account);\r\n\r\n                accountName = idData.account_name;\r\n            } else {\r\n                accountName = account;\r\n            }\r\n\r\n            return await api.v1.chain.get_account(accountName);\r\n        } catch (e) {\r\n            const error = e as Error;\r\n\r\n            if (error.message === 'Account not found at /v1/chain/get_account') {\r\n                throwError('Account \"' + account.toString() + '\" not found', SdkErrors.AccountDoesntExist);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    async signMessage(payload: any, recipient?: string): Promise<Message> {\r\n        const signer = createVCSigner(this.keyManager, KeyManagerLevel.LOCAL);\r\n\r\n        const issuer: Issuer = {\r\n            did: (await this.getDid()) + '#local',\r\n            signer: signer.sign as any,\r\n            alg: 'ES256K-R',\r\n        };\r\n\r\n        return await Message.sign(payload, issuer, recipient);\r\n    }\r\n\r\n    /**\r\n     * Generate did in storage\r\n     * @return {string} did string\r\n     */\r\n    async createDid(): Promise<string> {\r\n        if (!this.chainID) {\r\n            this.chainID = (await getChainInfo()).chain_id as unknown as Checksum256;\r\n        }\r\n\r\n        const accountName = await this.storage.accountName;\r\n\r\n        this.storage.did = `did:antelope:${this.chainID}:${accountName.toString()}`;\r\n        await this.storage.did;\r\n        return this.storage.did;\r\n    }\r\n\r\n    async intializeFromStorage() {\r\n        const accountName = await this.getAccountName();\r\n\r\n        if (accountName) {\r\n            return await this.checkKeysStillValid();\r\n        } else {\r\n            throwError('Account \"' + accountName + '\" not found', SdkErrors.AccountDoesntExist);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Initialize and return the user object\r\n * @param keyManager  the key manager\r\n * @param storage  the storage\r\n * @returns the user object\r\n */\r\nexport function createUserObject(keyManager: KeyManager, storageFactory: StorageFactory): User {\r\n    return new User(keyManager, storageFactory);\r\n}\r\n","type KeyWeight = { key: string; weight: number };\r\ntype PermissionWeight = {\r\n    permission: {\r\n        actor: string;\r\n        permission: string;\r\n    };\r\n    weight: number;\r\n};\r\ntype WaitWeight = { wait_sec: number; weight: number };\r\n\r\nclass Authority {\r\n    threshold: number;\r\n\r\n    keys: KeyWeight[];\r\n\r\n    accounts: PermissionWeight[];\r\n\r\n    waits: WaitWeight[];\r\n\r\n    constructor(threshold: number, keys: KeyWeight[], accounts: PermissionWeight[], waits: WaitWeight[]) {\r\n        this.threshold = threshold;\r\n        this.keys = keys;\r\n        this.accounts = accounts;\r\n        this.waits = waits;\r\n    }\r\n\r\n    static fromKey(key: string) {\r\n        const keys = [\r\n            {\r\n                key,\r\n                weight: 1,\r\n            },\r\n        ];\r\n        return new this(1, keys, [], []);\r\n    }\r\n\r\n    static fromAccount(permission: { actor: string; permission: string }) {\r\n        const accounts = [\r\n            {\r\n                permission,\r\n                weight: 1,\r\n            },\r\n        ];\r\n        return new this(1, [], accounts, []);\r\n    }\r\n\r\n    // to add the eosio.code authority for smart contracts\r\n    // https://developers.eos.io/welcome/v2.1/smart-contract-guides/adding-inline-actions#step-1-adding-eosiocode-to-permissions\r\n    addCodePermission(account: string) {\r\n        this.accounts.push({\r\n            permission: {\r\n                actor: account,\r\n                permission: 'eosio.code',\r\n            },\r\n            weight: 1,\r\n        });\r\n    }\r\n}\r\n\r\nexport { Authority };\r\n","/* eslint-disable camelcase */\r\nimport { ABI, API, Name, Serializer } from '@greymass/eosio';\r\nimport { Authority } from '../eosio/authority';\r\nimport { Signer, transact } from '../eosio/transaction';\r\n\r\nclass EosioContract {\r\n    static singletonInstance: EosioContract;\r\n\r\n    public static get Instance() {\r\n        return this.singletonInstance || (this.singletonInstance = new this());\r\n    }\r\n\r\n    /**\r\n     * Deploys a contract at the specified address\r\n     *\r\n     * @param account - Account where the contract will be deployed\r\n     * @param wasmFileContents - wasmFile after reading with fs.readFileSync(path) or equivalent\r\n     * @param abiFileContents - abiFile after reading with fs.readFileSync(path, `utf8`) or equivalent\r\n     */\r\n    async deployContract(\r\n        account: Name,\r\n        wasmFileContent: any,\r\n        abiFileContent: any,\r\n        signer: Signer\r\n    ): Promise<API.v1.PushTransactionResponse> {\r\n        // 1. Prepare SETCODE\r\n        // read the file and make a hex string out of it\r\n        const wasm = wasmFileContent.toString(`hex`);\r\n\r\n        // 2. Prepare SETABI\r\n        const abi = JSON.parse(abiFileContent);\r\n        const abiDef = ABI.from(abi);\r\n        const abiSerializedHex = Serializer.encode({ object: abiDef }).hexString;\r\n\r\n        // 3. Send transaction with both setcode and setabi actions\r\n        const setcodeAction = {\r\n            account: 'eosio',\r\n            name: 'setcode',\r\n            authorization: [\r\n                {\r\n                    actor: account.toString(),\r\n                    permission: 'active',\r\n                },\r\n            ],\r\n            data: {\r\n                account: account.toString(),\r\n                vmtype: 0,\r\n                vmversion: 0,\r\n                code: wasm,\r\n            },\r\n        };\r\n        const setabiAction = {\r\n            account: 'eosio',\r\n            name: 'setabi',\r\n            authorization: [\r\n                {\r\n                    actor: account.toString(),\r\n                    permission: 'active',\r\n                },\r\n            ],\r\n            data: {\r\n                account,\r\n                abi: abiSerializedHex,\r\n            },\r\n        };\r\n        const actions = [setcodeAction, setabiAction];\r\n        return await transact(Name.from('eosio'), actions, signer);\r\n    }\r\n\r\n    async newaccount(\r\n        creator: string,\r\n        account: string,\r\n        owner: Authority,\r\n        active: Authority,\r\n        signer: Signer\r\n    ): Promise<API.v1.PushTransactionResponse> {\r\n        const action = {\r\n            authorization: [\r\n                {\r\n                    actor: creator,\r\n                    permission: 'active',\r\n                },\r\n            ],\r\n            account: 'eosio',\r\n            name: 'newaccount',\r\n            data: {\r\n                creator,\r\n                name: account,\r\n                owner,\r\n                active,\r\n            },\r\n        };\r\n\r\n        return await transact(Name.from('eosio'), [action], signer);\r\n    }\r\n\r\n    async updateauth(\r\n        account: string,\r\n        permission: string,\r\n        parent: string,\r\n        auth: Authority,\r\n        signer: Signer\r\n    ): Promise<API.v1.PushTransactionResponse> {\r\n        const action = {\r\n            authorization: [\r\n                {\r\n                    actor: account,\r\n                    permission: parent, // both parent and permission work as authorization. though permission is supposed to be the authorization that works\r\n                },\r\n            ],\r\n            account: 'eosio',\r\n            name: 'updateauth',\r\n            data: {\r\n                account,\r\n                permission,\r\n                parent,\r\n                auth,\r\n            },\r\n        };\r\n\r\n        return await transact(Name.from('eosio'), [action], signer);\r\n    }\r\n}\r\n\r\nexport { EosioContract };\r\n","/* eslint-disable camelcase */\nimport { API, Name } from '@greymass/eosio';\nimport { Signer, transact } from '../eosio/transaction';\n\nclass EosioTokenContract {\n    static singletonInstande: EosioTokenContract;\n\n    public static get Instance() {\n        return this.singletonInstande || (this.singletonInstande = new this());\n    }\n\n    async create(supply: string, signer: Signer): Promise<API.v1.PushTransactionResponse> {\n        const actions = [\n            {\n                account: 'eosio.token',\n                name: 'create',\n                authorization: [\n                    {\n                        actor: 'eosio.token',\n                        permission: 'active',\n                    },\n                ],\n                data: {\n                    issuer: 'eosio.token',\n                    maximum_supply: supply,\n                },\n            },\n        ];\n\n        return await transact(Name.from('eosio.token'), actions, signer);\n    }\n\n    async issue(quantity: string, signer: Signer): Promise<API.v1.PushTransactionResponse> {\n        const actions = [\n            {\n                account: 'eosio.token',\n                name: 'issue',\n                authorization: [\n                    {\n                        actor: 'eosio.token',\n                        permission: 'active',\n                    },\n                ],\n                data: {\n                    to: 'eosio.token',\n                    quantity,\n                    memo: '',\n                },\n            },\n        ];\n\n        return await transact(Name.from('eosio.token'), actions, signer);\n    }\n}\n\nexport { EosioTokenContract };\n","import { PersistentStorage } from '../services/storage';\r\n\r\nexport class BrowserStorage implements PersistentStorage {\r\n    private _storage: {\r\n        [key in string]: any;\r\n    } = {} as any;\r\n    scope: string;\r\n\r\n    constructor(scope: string) {\r\n        this.scope = scope;\r\n        this._storage = {};\r\n    }\r\n\r\n    async retrieve(key: string): Promise<any> {\r\n        if (key in this._storage) return this._storage[key];\r\n\r\n        if (localStorage) {\r\n            const value = localStorage.getItem(key);\r\n\r\n            if (value) {\r\n                const returnValue = JSON.parse(value);\r\n\r\n                this._storage[key] = returnValue;\r\n                return returnValue;\r\n            }\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async store(key: string, value: any): Promise<void> {\r\n        if (localStorage) {\r\n            localStorage.setItem(key, JSON.stringify(value));\r\n        }\r\n\r\n        this._storage[key] = value;\r\n    }\r\n\r\n    async clear(): Promise<void> {\r\n        this._storage = {};\r\n\r\n        if (localStorage) {\r\n            for (let i = 0; i < localStorage.length; i++) {\r\n                const key = localStorage.key(i);\r\n\r\n                if (typeof key === 'string' && key.startsWith(this.scope)) {\r\n                    localStorage.removeItem(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function browserStorageFactory(scope: string): PersistentStorage {\r\n    return new BrowserStorage(scope);\r\n}\r\n","import { KeyManager, KeyManagerLevel } from './services/keymanager';\r\nimport { JWTLoginPayload, OnPressLoginOptions, UserApps } from './userApps';\r\nimport { createVCSigner, generateRandomKeyPair, randomString } from './util/crypto';\r\nimport { ES256KSigner } from '@tonomy/did-jwt';\r\nimport { createJWK, toDid } from './util/did-jwk';\r\nimport { Message } from './util/message';\r\nimport { getSettings } from './settings';\r\nimport { SdkErrors, throwError } from './services/errors';\r\nimport { createStorage, PersistentStorageClean, StorageFactory } from './services/storage';\r\nimport { Checksum256, Name } from '@greymass/eosio';\r\nimport { TonomyUsername } from './services/username';\r\nimport { browserStorageFactory } from './managers/browserStorage';\r\nimport { getChainInfo } from './services/eosio/eosio';\r\n\r\nexport type ExternalUserStorage = {\r\n    accountName: Name;\r\n    username: TonomyUsername;\r\n    loginRequest: JWTLoginPayload;\r\n};\r\n\r\nexport type VerifyLoginOptions = {\r\n    checkKeys?: boolean;\r\n    keyManager: KeyManager;\r\n    storageFactory?: StorageFactory;\r\n};\r\n\r\nexport class ExternalUser {\r\n    keyManager: KeyManager;\r\n    storage: ExternalUserStorage & PersistentStorageClean;\r\n    did_: string;\r\n\r\n    /**\r\n     * Creates a new external user\r\n     *\r\n     * @param _keyManager {KeyManager} - the key manager to use for signing\r\n     */\r\n    constructor(_keyManager: KeyManager, _storageFactory: StorageFactory) {\r\n        this.keyManager = _keyManager;\r\n        this.storage = createStorage<ExternalUserStorage>('tonomy.externalUser.', _storageFactory);\r\n    }\r\n\r\n    static async getUser(\r\n        keyManager: KeyManager,\r\n        storageFactory: StorageFactory = browserStorageFactory\r\n    ): Promise<ExternalUser> {\r\n        const user = new ExternalUser(keyManager, storageFactory);\r\n\r\n        try {\r\n            const accountName = await user.getAccountName();\r\n\r\n            if (!accountName) {\r\n                //TODO: logout\r\n                // keyManager.clear(); must be implemented in future keymanager\r\n                throw throwError('accountName not found', SdkErrors.AccountNotFound);\r\n            }\r\n\r\n            const result = await UserApps.verifyKeyExistsForApp(accountName.toString(), keyManager);\r\n\r\n            if (result) {\r\n                return user;\r\n            } else {\r\n                throw throwError('User Not loggedIn', SdkErrors.UserNotLoggedIn);\r\n            }\r\n        } catch (e) {\r\n            //TODO logout\r\n            // keyManager.clear(); must be implemented in future keymanager\r\n            user.storage.clear();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async getDid() {\r\n        if (!this.did_) {\r\n            const accountName = await (await this.getAccountName()).toString();\r\n            const chainID = (await getChainInfo()).chain_id as unknown as Checksum256;\r\n\r\n            this.did_ = `did:antelope:${chainID}:${accountName}#local`;\r\n        }\r\n\r\n        return this.did_;\r\n    }\r\n\r\n    /**\r\n     * Sets the account name of the user\r\n     *\r\n     * @param accountName {Name} - the account name of the user\r\n     */\r\n    async setAccountName(accountName: Name): Promise<void> {\r\n        this.storage.accountName = accountName;\r\n        await this.storage.accountName;\r\n    }\r\n\r\n    /**\r\n     * Sets the username of the user\r\n     *\r\n     * @param username {string} - the username of the user\r\n     */\r\n    async setUsername(username: string): Promise<void> {\r\n        this.storage.username = new TonomyUsername(username);\r\n        await this.storage.username;\r\n    }\r\n\r\n    /**\r\n     * Gets the username of the user\r\n     *\r\n     * @returns {Promise<TonomyUsername>} - the username of the user\r\n     */\r\n    async getUsername(): Promise<TonomyUsername> {\r\n        return await this.storage.username;\r\n    }\r\n\r\n    /**\r\n     * Sets the login request\r\n     *\r\n     * @param loginRequest {JWTLoginPayload} - the login request\r\n     */\r\n    async setLoginRequest(loginRequest: JWTLoginPayload): Promise<void> {\r\n        this.storage.loginRequest = loginRequest;\r\n        await this.storage.loginRequest;\r\n    }\r\n\r\n    /**\r\n     * Gets the login request\r\n     *\r\n     * @returns {Promise<JWTLoginPayload>} - the login request\r\n     */\r\n    async getLoginRequest(): Promise<JWTLoginPayload> {\r\n        return await this.storage.loginRequest;\r\n    }\r\n\r\n    /**\r\n     * Gets the account name of the user\r\n     *\r\n     * @returns {Promise<Name>} - the account name of the user\r\n     */\r\n    async getAccountName(): Promise<Name> {\r\n        return await this.storage.accountName;\r\n    }\r\n\r\n    /**\r\n     * Redirects the user to login to the app with their Tonomy ID account\r\n     *\r\n     * @description should be called when the user clicks on the login button\r\n     *\r\n     * @param onPressLoginOptions {OnPressLoginOptions} - options for the login\r\n     * @property onPressLoginOptions.redirect {boolean} - if true, redirects the user to the login page, if false, returns the token\r\n     * @property onPressLoginOptions.callbackPath {string} - the path to redirect the user to after login\r\n     * @param keyManager {KeyManager} - the key manager to use to store the keys\r\n     * @returns {Promise<string | void>} - if redirect is true, returns void, if redirect is false, returns the login request in the form of a JWT token\r\n     */\r\n    static async loginWithTonomy(\r\n        { redirect = true, callbackPath }: OnPressLoginOptions,\r\n        keyManager: KeyManager\r\n    ): Promise<string | void> {\r\n        const { privateKey, publicKey } = generateRandomKeyPair();\r\n\r\n        if (keyManager) {\r\n            await keyManager.storeKey({\r\n                level: KeyManagerLevel.BROWSER_LOCAL_STORAGE,\r\n                privateKey: privateKey,\r\n            });\r\n        }\r\n\r\n        const payload: JWTLoginPayload = {\r\n            randomString: randomString(32),\r\n            origin: window.location.origin,\r\n            publicKey: publicKey.toString(),\r\n            callbackPath,\r\n        };\r\n\r\n        // TODO use expiresIn to make JWT expire after 5 minutes\r\n\r\n        const signer = ES256KSigner(privateKey.data.array, true);\r\n        const jwk = await createJWK(publicKey);\r\n\r\n        const issuer = toDid(jwk);\r\n\r\n        const token = (await Message.sign(payload, { did: issuer, signer: signer as any, alg: 'ES256K-R' })).jwt;\r\n\r\n        const requests = [token];\r\n        const requestsString = JSON.stringify(requests);\r\n\r\n        if (redirect) {\r\n            window.location.href = `${getSettings().ssoWebsiteOrigin}/login?requests=${requestsString}`;\r\n            return;\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param [keymanager=JSKEymanager]\r\n     * @throws if user doesn't exists, keys are missing or user not loggedIn\r\n     * @returns the external user object\r\n     */\r\n    //   static getUser(keymanager = JSsKeymanager: KeyManager): Promise<ExternalUser> {\r\n    //  * checks storage for keys and other metadata\r\n    //  * fethces user from blockchain\r\n    //  * checks if user is loggedin by verifying the keys\r\n    //  * delete the keys from storage if they are not verified\r\n    //  * returns the user object\r\n    //  */\r\n    // return Object.assign(this, {})\r\n    //   }\r\n\r\n    /**\r\n     * Signs a message with the given key manager and the key level\r\n     *\r\n     * @param message {any} - an object to sign\r\n     * @param keyManager {KeyManager} - the key manager to use to sign the message\r\n     */\r\n    static async signMessage(message: any, keyManager: KeyManager, recipient?: string): Promise<Message> {\r\n        const keyManagerLevel = KeyManagerLevel.BROWSER_LOCAL_STORAGE;\r\n        const publicKey = await keyManager.getKey({\r\n            level: keyManagerLevel,\r\n        });\r\n\r\n        if (!publicKey) throw throwError('No Key Found for this level', SdkErrors.KeyNotFound);\r\n        const signer = createVCSigner(keyManager, keyManagerLevel).sign;\r\n\r\n        const jwk = await createJWK(publicKey);\r\n\r\n        const issuer = toDid(jwk);\r\n\r\n        return await Message.sign(message, { did: issuer, signer: signer as any, alg: 'ES256K-R' }, recipient);\r\n    }\r\n\r\n    /**\r\n     * Receives the login request from Tonomy ID and verifies the login was successful\r\n     *\r\n     * @description should be called in the callback page\r\n     *\r\n     * @param {options} VerifyLoginOptions - options for the login\r\n     * @property {options.checkKeys} boolean - if true, checks the keys in the keyManager against the blockchain\r\n     * @property {options.keyManager} KeyManager - the key manager to use to storage and manage keys\r\n     * @property {options.storageFactory} [StorageFactory] - the storage factory to use to store data\r\n     *\r\n     * @returns {Promise<ExternalUser>} an external user object ready to use\r\n     */\r\n    static async verifyLoginRequest(options: VerifyLoginOptions): Promise<ExternalUser> {\r\n        if (!options.checkKeys) options.checkKeys = true;\r\n\r\n        const { requests, username, accountName } = UserApps.getLoginRequestParams();\r\n\r\n        const result = await UserApps.verifyRequests(requests);\r\n\r\n        const loginRequest = result.find((r) => r.getPayload().origin === window.location.origin)?.getPayload();\r\n\r\n        if (!loginRequest) throwError('No login request found for this origin', SdkErrors.OriginMismatch);\r\n        if (\r\n            loginRequest.publicKey !==\r\n            (await options.keyManager.getKey({ level: KeyManagerLevel.BROWSER_LOCAL_STORAGE }))?.toString()\r\n        )\r\n            throwError('Key in request does not match', SdkErrors.KeyNotFound);\r\n\r\n        if (options.checkKeys) {\r\n            const keyExists = await UserApps.verifyKeyExistsForApp(accountName, options.keyManager);\r\n\r\n            if (!keyExists) throwError('Key not found', SdkErrors.KeyNotFound);\r\n        }\r\n\r\n        const myStorageFactory = options.storageFactory || browserStorageFactory;\r\n        const externalUser = new ExternalUser(options.keyManager, myStorageFactory);\r\n\r\n        await externalUser.setAccountName(Name.from(accountName));\r\n        await externalUser.setLoginRequest(loginRequest);\r\n        await externalUser.setUsername(username);\r\n        return externalUser;\r\n    }\r\n}\r\n","import * as Eosio from './services/eosio/eosio';\r\nimport * as Transaction from './services/eosio/transaction';\r\n\r\nexport * from './services/keymanager';\r\nexport * from './services/storage';\r\nexport * from './user';\r\nexport * from './userApps';\r\nexport * from './app';\r\n\r\nexport * from './settings';\r\nexport * from './services/eosio/authority';\r\nexport * from './util/crypto';\r\nexport * from './services/username';\r\n\r\nconst EosioUtil = { ...Eosio, ...Transaction };\r\n\r\nexport { EosioUtil };\r\n\r\nexport * from './services/contracts/IDContract';\r\nexport * from './services/contracts/EosioContract';\r\nexport * from './services/contracts/EosioTokenContract';\r\n\r\nexport * from './services/errors';\r\nexport * from './userApps';\r\nexport * from './communication';\r\nexport * from './util/message';\r\nexport * from './externalUser';\r\nexport * from './managers/browserStorage';\r\n\r\nexport { createSigner } from '@tonomy/antelope-ssi-toolkit';\r\nexport { ES256KSigner } from '@tonomy/did-jwt';\r\n"],"names":["HttpError","_Error","_inheritsLoose","httpError","_this","call","name","constructor","Error","captureStackTrace","_assertThisInitialized","stack","path","response","line","column","sourceURL","_wrapNativeSuper","SdkError","_Error2","message","_this2","createSdkError","code","error","throwError","SdkErrors","indexFor","value","Object","keys","indexOf","from","index","values","settings","initialized","setSettings","newSettings","getSettings","SettingsNotInitialized","api","getApi","_getApi","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","APIClient","url","blockchainUrl","provider","FetchProvider","fetch","CouldntCreateApi","stop","getChainInfo","_getChainInfo","_callee2","_callee2$","_context2","sent","v1","chain","get_info","createSigner","privateKey","sign","digest","signDigest","createKeyManagerSigner","keyManager","level","challenge","signData","data","AntelopePushTransactionError","err","_proto","prototype","hasErrorCode","hasTonomyErrorCode","details","search","transact","_x","_x2","_x3","_transact","_callee3","contract","actions","signer","abi","actionData","info","header","transaction","signature","signedTransaction","res","_callee3$","_context3","get_abi","forEach","push","Action","_extends","account","getTransactionHeader","Transaction","signingDigest","chain_id","SignedTransaction","signatures","push_transaction","t0","headers","json","KeyManagerLevel","storageProxyHandler","get","target","key","scopedKey","scope","cache","retrieve","then","e","set","_set","store","createStorage","storageFactory","storage","proxy","Proxy","secp256k1","elliptic","ec","randomBytes","bytes","rb","Uint8Array","validateKey","keyPair","result","validate","reason","InvalidKey","toElliptic","ecKeyPair","PublicKey","keyFromPublic","array","keyFromPrivate","randomString","random","Array","map","int2hex","join","sha256","Checksum256","hash","Bytes","encodeHex","toString","i","slice","str","split","c","charCodeAt","padStart","decodeHex","hex","filter","p","String","fromCharCode","parseInt","generateRandomKeyPair","PrivateKey","KeyType","K1","publicKey","toPublic","createVCSigner","outputType","AccountType","getPreSuffix","toLowerCase","TonomyUsername","username","hashed","usernameHash","fromHash","fromUsername","type","suffix","fullUsername","fromFullUsername","getBaseUsername","_this$username","PermissionLevel","IDContract","newperson","_newperson","username_hash","password_key","password_salt","action","authorization","actor","permission","Name","_x4","updatekeysper","_updatekeysper","length","UpdateKeysTransactionNoKeys","_x5","_x6","_x7","newapp","_newapp","app_name","description","logo_url","origin","test","_x8","_x9","_x10","_x11","_x12","_x13","_x14","loginwithapp","_loginwithapp","_callee4","app","parent","_callee4$","_context4","_x15","_x16","_x17","_x18","_x19","getPerson","_getPerson","_callee5","idData","_callee5$","_context5","get_table_rows","table","lower_bound","limit","index_position","rows","DataQueryNoRowDataFound","UsernameNotFound","account_name","AccountDoesntExist","status","version","_x20","getApp","_getApp","_callee6","originHash","_callee6$","_context6","OriginNotFound","_x21","_createClass","singletonInstance","top100Passwords","validatePassword","masterPassword","normalizedPassword","normalize","PasswordFormatInvalid","_iterator","_createForOfIteratorHelperLoose","_step","done","password","includes","PasswordTooCommon","idContract","Instance","AppStatus","App","options","accountName","appName","logoUrl","create","_create","newAccountAction","usernamePrefix","APP","accountSuffix","processed","action_traces","inline_traces","act","READY","contractAppData","chars","Base64","btoa","input","output","block","charCode","charAt","atob","replace","bc","bs","buffer","Buffer","window","bnToBase64Url","bn","toArrayLike","hexToBase64","hexstring","match","a","utf8ToB64","unescape","encodeURIComponent","b64ToUtf8","decodeURIComponent","escape","createJWK","ecPubKey","publicKeyJwk","crv","kty","x","getPublic","getX","y","getY","kid","toDid","jwk","_objectWithoutPropertiesLoose","_excluded","id","JSON","stringify","did","toDidDocument","getPublicOperationsFromPrivate","keyOps","d","key_ops","_excluded2","vm","controller","didDocument","verificationMethod","resolve","decoded","pop","parse","Message","jwt","decodedJwt","decodeJWT","_sign","issuer","recipient","vc","issuanceDate","Date","toISOString","credentialSubject","issue","OutputType","JWT","getSender","payload","iss","getRecipient","sub","getPayload","verify","_verify","jwkResolver","resolver","Resolver","getResolver","antelopeChainUrl","crossFetch","Promise","any","verifyCredential","verified","UserApps","_user","_keyManager","user","loginWithApp","_loginWithApp","myAccount","appRecord","apps","added","PENDING","appRecords","LOCAL","verifyRequests","_verifyRequests","requests","jwtRequests","MissingParams","isArray","verifyLoginJWT","t1","getLoginRequestParams","params","URLSearchParams","location","onRedirectLogin","_onRedirectLogin","urlParams","verifiedRequests","referrer","_iterator2","_step2","URL","document","r","WrongOrigin","verifyKeyExistsForApp","_verifyKeyExistsForApp","keyManagerLevel","BROWSER_LOCAL_STORAGE","getKey","pubKey","KeyNotFound","User","getAccountInfo","AccountNotFound","publickey","getPermission","required_auth","_verifyLoginJWT","JwtNotValid","Communication","connect","_connect","_this$socketServer","socketServer","connected","communicationUrl","io","transports","reject","on","setTimeout","CommunicationNotConnected","emitMessage","_emitMessage","event","emit","CommunicationTimeout","login","_login","sendMessage","subscribeMessage","subscriber","unsubscribeMessage","off","disconnect","_this$socketServer2","UserStatus","communication","getStatus","_getStatus","getAccountName","_getAccountName","getUsername","_getUsername","getDid","_getDid","saveUsername","_saveUsername","normalizedUsername","PERSON","UsernameTaken","savePassword","_savePassword","salt","_res","generatePrivateKeyFromPassword","storeKey","PASSWORD","savePIN","_savePIN","_callee7","pin","_callee7$","_context7","generateRandomPrivateKey","PIN","checkPin","_checkPin","_callee8","pinKey","_callee8$","_context8","checkKey","PinInValid","saveFingerprint","_saveFingerprint","_callee9","_callee9$","_context9","FINGERPRINT","saveLocal","_saveLocal","_callee10","_callee10$","_context10","createPerson","_createPerson","_callee11","passwordKey","idTonomyActiveKey","_callee11$","_context11","CREATING_ACCOUNT","createDid","updateKeys","_updateKeys","_callee12","fingerprintKey","localKey","_callee12$","_context12","DEACTIVATED","checkPassword","_checkPassword","_callee13","accountData","onchainKey","_callee13$","_context13","PasswordInValid","_callee14","_callee14$","_context14","LOGGING_IN","checkKeysStillValid","_checkKeysStillValid","_callee15","accountInfo","checkPairs","_i","_checkPairs","pair","blockchainPermission","_callee15$","_context15","t2","logout","_logout","_callee16","_callee16$","_context16","removeKey","clear","isLoggedIn","_isLoggedIn","_callee17","_callee17$","_context17","_getAccountInfo","_callee18","_callee18$","_context18","get_account","signMessage","_signMessage","_callee19","_callee19$","_context19","alg","_createDid","_callee20","_callee20$","_context20","chainID","intializeFromStorage","_intializeFromStorage","_callee21","_callee21$","_context21","createUserObject","Authority","threshold","accounts","waits","fromKey","weight","fromAccount","addCodePermission","EosioContract","deployContract","_deployContract","wasmFileContent","abiFileContent","wasm","abiDef","abiSerializedHex","setcodeAction","setabiAction","ABI","Serializer","encode","object","hexString","vmtype","vmversion","newaccount","_newaccount","creator","owner","active","updateauth","_updateauth","auth","EosioTokenContract","supply","maximum_supply","_issue","quantity","to","memo","singletonInstande","BrowserStorage","_storage","_retrieve","returnValue","localStorage","getItem","undefined","_store","setItem","_clear","startsWith","removeItem","browserStorageFactory","ExternalUser","_storageFactory","getUser","_getUser","UserNotLoggedIn","did_","setAccountName","_setAccountName","setUsername","_setUsername","setLoginRequest","_setLoginRequest","loginRequest","getLoginRequest","_getLoginRequest","loginWithTonomy","_loginWithTonomy","_ref","_ref$redirect","redirect","callbackPath","_generateRandomKeyPai","token","requestsString","ES256KSigner","href","ssoWebsiteOrigin","verifyLoginRequest","_verifyLoginRequest","_result$find","_yield$options$keyMan","_UserApps$getLoginReq","keyExists","myStorageFactory","externalUser","checkKeys","find","OriginMismatch","t3","EosioUtil","Eosio"],"mappings":"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"}